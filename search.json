[{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using synr with real data: Coloured vowels","text":"example use synr actual data. -depth tutorial explains synr works, including functionality comes , please see main tutorial. data used study Cuskley, Dingemanse, van Leeuwen & Kirby (2019) available GitHub repository. Note user (mdingemanse) owns repository involved synr development, please don’t send questions synr co-authors article. data experiment participants listened 16 different recordings spoken vowel sounds responded colors experienced/associated vowels. can find much detail article repository. tutorial, ’ll assume recordings can thought single object, analogous grapheme. Note even though synr always refers trial stimuli ‘graphemes’ ‘symbols’ (order make documentation less abstract), can apply synr types consistency test data. Just remember ‘grapheme’ really means e. g. ‘vowel sound’ whatever type stimuli presented participants.","code":""},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"load-required-libraries","dir":"Articles","previous_headings":"","what":"Load required libraries","title":"Using synr with real data: Coloured vowels","text":"’ll use tidyr reformat raw data, explained , ggplot2 producing custom plots. already ggplot2 installed since synr depends , may need run install.packages(\"tidyr\") get tidyr.","code":"library(synr) library(tidyr) library(ggplot2)"},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"download-and-reformat-raw-data","dir":"Articles","previous_headings":"","what":"Download and reformat raw data","title":"Using synr with real data: Coloured vowels","text":"’ll first download raw data GitHub. downloaded data ‘one-row-per-stimulus’ (vocal sound) format. synr needs data either ‘long’ ‘wide’ format, described article Creating ParticipantGroup objects. Generally, ‘long’ format preferred, let’s reformat data .","code":"# download the 'coloured vowels' data githuburl <- 'https://raw.githubusercontent.com/mdingemanse/colouredvowels/master/BRM_colouredvowels_voweldata.csv' dingemanse_voweldata <- read.csv(githuburl, sep=' ') # 'pivot' the data into a long (one row per observation/trial) format, # using tidyr's pivot_longer function (and the 'pipe' %>% operator) cvow_long <- dingemanse_voweldata %>%    pivot_longer(     cols=c('color1', 'color2', 'color3',       'timing1', 'timing2', 'timing3'),     names_to=c(\".value\", \"trial\"),     names_pattern=\"(\\\\w*)(\\\\d)\",     values_to=c('color', 'timing')   ) print(head(cvow_long)) #> # A tibble: 6 × 6 #>   anonid                               setname  item trial color   timing #>   <chr>                                <chr>   <int> <chr> <chr>    <int> #> 1 0045dbc0-8936-4c47-b8a2-333f29f3a505 set1       12 1     #A82816  18689 #> 2 0045dbc0-8936-4c47-b8a2-333f29f3a505 set1       12 2     #B2282B   6599 #> 3 0045dbc0-8936-4c47-b8a2-333f29f3a505 set1       12 3     #BB322B   5893 #> 4 0045dbc0-8936-4c47-b8a2-333f29f3a505 set1        9 1     #3C3899  12561 #> 5 0045dbc0-8936-4c47-b8a2-333f29f3a505 set1        9 2     #F44E50   4046 #> 6 0045dbc0-8936-4c47-b8a2-333f29f3a505 set1        9 3     #EE5A3D   7648"},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"roll-up-data-into-a-participantgroup-object","dir":"Articles","previous_headings":"","what":"Roll up data into a ParticipantGroup object","title":"Using synr with real data: Coloured vowels","text":"Note might take couple minutes, since data set quite large. use L*u*v color space , since ’s article’s authors used.","code":"pg <- create_participantgroup(   raw_df=cvow_long,   n_trials_per_grapheme=3,   id_col_name=\"anonid\",   symbol_col_name=\"item\",   color_col_name=\"color\",   time_col_name=\"timing\",   color_space_spec=\"Luv\" )"},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"single-participant-plot","dir":"Articles","previous_headings":"Apply various synr functions","what":"Single participant plot","title":"Using synr with real data: Coloured vowels","text":"Let’s produce plot participant ID “0086e9c0-418c-404c-8f3c-219de93cc3dc” (raw data use anonymized ID’s, rather unwieldy).  Remember ‘grapheme’ axis really ‘recording/vowel sounds’ axis. participant appears provided valid responses fair bit variation. mean consistency score (green line) slightly 200, far higher cutoff (blue line) 135.30 suggested Rothen, Seth, Witzel & Ward (2013) L*u*v color space. course, ’s expected users want produce plots participants look one one. can however useful look get better feel data, inspect data closely something participant’s responses seems .","code":"example_plot <- pg$participants[[\"0086e9c0-418c-404c-8f3c-219de93cc3dc\"]]$get_plot(   mean_line=TRUE,   cutoff_line=TRUE,   grapheme_size=4 ) # inspect the plot example_plot"},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"mean-consistency-scores","dir":"Articles","previous_headings":"Apply various synr functions","what":"Mean consistency scores","title":"Using synr with real data: Coloured vowels","text":", force mean consistency score calculated even participants () items less 3 valid color responses specifying na.rm=TRUE. specify consistency scores calculated using euclidean distances (synr uses euclidean distances default, ’s specified extra clarity). ’ll also put consistency scores data frame scores linked respective participant ID’s:","code":"mean_cons_scores <- pg$get_mean_consistency_scores(    method='euclidean',   na.rm=TRUE ) participant_ids <- pg$get_ids() cons_score_df <- data.frame(   participant_id=participant_ids,    mean_cons_score=mean_cons_scores ) print(head(cons_score_df)) #>                         participant_id mean_cons_score #> 1 0045dbc0-8936-4c47-b8a2-333f29f3a505        85.22161 #> 2 005c48a4-acb7-4e25-8e4a-447e08a2dc85       225.60228 #> 3 0086e9c0-418c-404c-8f3c-219de93cc3dc       205.05324 #> 4 009f9049-bb4f-4dec-a889-2a408d9b7fc4        84.60556 #> 5 00ac0df1-ee81-4357-86c9-ce8691a6a4f1       171.22806 #> 6 0127d04d-0070-4bec-a004-2e658edac121       227.25244"},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"number-of-graphemes-with-all-valid-responses","dir":"Articles","previous_headings":"Apply various synr functions","what":"Number of graphemes with all-valid responses","title":"Using synr with real data: Coloured vowels","text":"Let’s add information participant number graphemes provided -valid (3 non-NA, ie correctly chose color) responses . might want include participants minimum 8 (50%) stimuli -valid responses, based original article says: total 34 participants removed sample chose “color” half items vowel association task, making impossible calculate valid vowel consistency score. ’s clear seemingly participants fit exclusion criteria data GitHub compared reported original article. (notice error article, please write datalowe@posteo.de)","code":"num_valid <- pg$get_numbers_all_colored_graphemes()  cons_score_df[['num_allvalid_sounds']] <- num_valid print(head(cons_score_df)) #>                         participant_id mean_cons_score num_allvalid_sounds #> 1 0045dbc0-8936-4c47-b8a2-333f29f3a505        85.22161                  16 #> 2 005c48a4-acb7-4e25-8e4a-447e08a2dc85       225.60228                  16 #> 3 0086e9c0-418c-404c-8f3c-219de93cc3dc       205.05324                  16 #> 4 009f9049-bb4f-4dec-a889-2a408d9b7fc4        84.60556                  16 #> 5 00ac0df1-ee81-4357-86c9-ce8691a6a4f1       171.22806                  16 #> 6 0127d04d-0070-4bec-a004-2e658edac121       227.25244                  16 print(paste('number of participants before filtering:', nrow(cons_score_df))) #> [1] \"number of participants before filtering: 1164\"  enough_responses_filter <- cons_score_df$num_allvalid_sounds >= 8 cons_score_df <- cons_score_df[enough_responses_filter, ]  print(paste('number of participants after filtering:', nrow(cons_score_df))) #> [1] \"number of participants after filtering: 1105\""},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"validate-participant-data","dir":"Articles","previous_headings":"Apply various synr functions","what":"Validate participant data","title":"Using synr with real data: Coloured vowels","text":"synr includes unique procedure automatically classifying test data valid invalid, explained specific synr article available online. Cuskley et al.’s article doesn’t mention validation procedure apart excluding participants many “color” responses, might try apply lenient criteria order catch obviously invalid data, participants used similar colors (eg slightly different shades black) 80% responses. Please see validation article online details ’s happening . identified data sets classified synr invalid appear 80% responses roughly color. One participants, ‘de916a2b-5041-4ecf-af86-4e11feaa5d4c’, clearly invalid data even based just consistency score (0.034), extremely low (due responded black trials). might interesting take closer look participant highest consistency score (44.2), case might somewhat less clear-cut.  participant actually used might consider different colors, ie hues. Note however consistency score (44.2) means considered synesthete, even though actually little consistency hues used different sounds, due colors light. instance, participant used ‘greyish’, ‘brownish’ ‘bluish’ color 12th grapheme/sound, even consistency score particular grapheme well cutoff 135.3. means even though one argue responses fairly different hues, least context consistency tests currently commonly used evaluated, synr correct classifying participant’s data invalid, ie little color variation. appears synr used manner, misclassifications participants synesthetes prevented.","code":"validation_df <- pg$check_valid_get_twcv_scores(   min_complete_graphemes = 8,   dbscan_eps = 20,   dbscan_min_pts = 4,   max_var_tight_cluster = 150,   max_prop_single_tight_cluster = 0.8,   safe_num_clusters = 2,   safe_twcv = 300 )  # again, use filter to only keep data from participants with # >=8 all-valid responses graphemes validation_df <- validation_df[enough_responses_filter, ]  cons_score_df[['data_valid']] <- validation_df$valid cons_score_df[['reason_invalid']] <- validation_df$reason_invalid  # show only participants whose data were classified as invalid, # and only relevant columns cons_score_df[!cons_score_df$data_valid, c(\"participant_id\", \"mean_cons_score\", \"reason_invalid\")] #>                            participant_id mean_cons_score        reason_invalid #> 11   01e8370f-22a2-434a-b86b-ebfc65f28327     63.30219869 few_clusters_low_twcv #> 26   06644552-815c-47ad-a1a4-d774ac61f1e8     38.09724961 hi_prop_tight_cluster #> 37   0b40b649-8cd0-4252-bcad-04b607694eb9     36.04509901 hi_prop_tight_cluster #> 100  1fcd6ef5-057d-4655-a314-17aee2cbac99     25.20097383 hi_prop_tight_cluster #> 134  28f1a586-d2c5-4c44-ba33-60e59768847c     59.66737827 few_clusters_low_twcv #> 288  58156a1e-2633-4435-b404-750ec370bd51     36.42790210 hi_prop_tight_cluster #> 408  7ae98022-d5d8-460e-a1c3-68b43487e191     16.41104298 hi_prop_tight_cluster #> 554  ad9219a1-9566-4654-ba28-ac277175a347     36.19079247 hi_prop_tight_cluster #> 606  bc3ed730-ceed-44f0-97ac-8bf7fe1b8615     39.27415198 hi_prop_tight_cluster #> 645  ca108b61-6b84-4e1e-ab31-4c111ff885a6     27.54943999 hi_prop_tight_cluster #> 674  d47c0e32-e3e2-4acf-84d0-08bf7375308b     44.21594367 hi_prop_tight_cluster #> 717  de916a2b-5041-4ecf-af86-4e11feaa5d4c      0.03445631 hi_prop_tight_cluster #> 931  5b84fcd8-7982-46bd-9f13-1771a4f2b6df     44.28342864 hi_prop_tight_cluster #> 935  660ed2f1-7631-4c97-a46e-f9481d37bc4b     56.10827516 hi_prop_tight_cluster #> 992  e8dd5ab3-8d3d-4137-9fd4-3b6fdf42cb97     69.07712926 few_clusters_low_twcv #> 1104 43dd077f-b955-4ba0-8ebb-a442a4ad913f     34.78898926 hi_prop_tight_cluster #> 1154 2b20c245-5ca1-4a1e-9b71-daa17ef445e1     46.99291493 few_clusters_low_twcv pg$participants[[\"d47c0e32-e3e2-4acf-84d0-08bf7375308b\"]]$get_plot(   grapheme_size=4 )"},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"use-synr-generated-data-with-other-libraries","dir":"Articles","previous_headings":"Apply various synr functions","what":"Use synr-generated data with other libraries","title":"Using synr with real data: Coloured vowels","text":"data exported data frame, can used libraries usual. example, might interested distribution mean consistency scores.   appears 30% participants scored suggested cut-135, already reported Cuskley et al.","code":"ggplot(cons_score_df, aes(x=mean_cons_score)) +     geom_density() +   geom_vline(xintercept = 135.3, color=\"blue\") +   labs(x='Mean consistency score', y='Probability density') ggplot(cons_score_df, aes(x=mean_cons_score)) +   stat_ecdf(geom = \"step\") +   geom_vline(xintercept = 135.3, color=\"blue\") +   labs(x='Mean consistency score', y='Cumulative proportion of participants')"},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Using synr with real data: Coloured vowels","text":"Much ‘results’ included can already found article Cuskley et al. However, article hopefully given idea synr can used different types data, role fulfills.","code":""},{"path":"https://datalowe.github.io/synr/articles/dingemanse-data-example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Using synr with real data: Coloured vowels","text":"Cuskley, C.1, Dingemanse, M.1, van Leeuwen, T. & Kirby, S. 2019. Cross-modal associations synaesthesia: Categorical perception structure vowel-colour mappings large online sample. Behaviour Research Methods, doi: 10.3758/s13428-019-01203-7 Rothen, N., Seth, . K., Witzel, C., & Ward, J. (2013). Diagnosing synaesthesia online colour pickers: maximising sensitivity specificity. Journal neuroscience methods, 215(1), 156-160.","code":""},{"path":"https://datalowe.github.io/synr/articles/quick-start.html","id":"rolling-up-the-data","dir":"Articles","previous_headings":"","what":"Rolling up the data","title":"synr: Quick start","text":"long format data (otherwise see Creating ParticipantGroup objects): resulting object (pg) nested structure implemented reference classes. , can call various methods access various attributes. Examples common use cases included .","code":"pg <- create_participantgroup(   raw_df=synr_exampledf_long_small,   n_trials_per_grapheme=2,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   time_col_name=\"response_time\", # optional, not necessary for core functionality   color_space_spec=\"Luv\" )"},{"path":"https://datalowe.github.io/synr/articles/quick-start.html","id":"calculate-participant-consistency-scores","dir":"Articles","previous_headings":"","what":"Calculate participant consistency scores","title":"synr: Quick start","text":"Consistency scores participants, looking trials involving letters.","code":"cons_scores_letters <- pg$get_mean_consistency_scores(symbol_filter=LETTERS) print(cons_scores_letters) #> [1] 119.2646 129.1678 145.5045"},{"path":"https://datalowe.github.io/synr/articles/quick-start.html","id":"produce-a-plot-of-a-single-participants-responses","dir":"Articles","previous_headings":"","what":"Produce a plot of a single participant’s responses","title":"synr: Quick start","text":"Plot single participant’s per-grapheme consistency scores, looking trials involving graphemes ‘’ ‘7’.","code":"pg$participants[['1']]$get_plot(symbol_filter=c('A', '7'))"},{"path":"https://datalowe.github.io/synr/articles/quick-start.html","id":"export-relevant-participant-data-to-a-data-frame","dir":"Articles","previous_headings":"","what":"Export relevant participant data to a data frame","title":"synr: Quick start","text":"","code":"# get mean consistency scores for all participants, filtering first by letters, then digits mean_cscores_letters <- pg$get_mean_consistency_scores(symbol_filter=LETTERS) mean_cscores_digits <- pg$get_mean_consistency_scores(symbol_filter=0:9)  # get number of graphemes where all response colors were non-missing,  # filtering first by letters, then digits # (in the example data frame, all participants have all-valid responses) num_valid_letters <- pg$get_numbers_all_colored_graphemes(symbol_filter=LETTERS) num_valid_digits <- pg$get_numbers_all_colored_graphemes(symbol_filter=0:9)  p_ids <- pg$get_ids()  mean_scores_df <- data.frame(   participant_id=p_ids,    cscore_letters=mean_cscores_letters,   cscore_digits=mean_cscores_digits,   num_valid_letters=num_valid_letters,   num_valid_digits=num_valid_digits ) print(mean_scores_df) #>   participant_id cscore_letters cscore_digits num_valid_letters #> 1              1       119.2646       155.089                 2 #> 2              2       129.1678        45.786                 2 #> 3              3       145.5045       164.870                 2 #>   num_valid_digits #> 1                1 #> 2                1 #> 3                1"},{"path":"https://datalowe.github.io/synr/articles/quick-start.html","id":"finding-more-information","dir":"Articles","previous_headings":"","what":"Finding more information","title":"synr: Quick start","text":"Apart aforementioned vignettes, can find help documentation fields/attributes methods involved objects running help(ParticipantGroup), help(Participant) help(Grapheme).","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ParticipantGroup objects","text":"start using synr, must first convert data ParticipantGroup object. tutorial explains convert raw consistency test data object. information synr ParticipantGroup , please see main tutorial. synr offers separate methods converting ‘long format’ ‘wide format’ raw data ParticipantGroup objects. Brief explanations data formats included beginning section. Note missing data, e. g. response color hex codes participants missing, must coded data frame R NA values. used values represent missingness, must first replace values NA, e. g. using naniar package.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"long-format-data","dir":"Articles","previous_headings":"","what":"‘Long format’ data","title":"Creating ParticipantGroup objects","text":"‘Long format’ data adhere rule one column variable/type data. consistency tests, means trial one row data frame one column participant color responses one trial graphemes/symbols. might also familiar ‘long format’ working tidy data.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"example-data","dir":"Articles","previous_headings":"‘Long format’ data","what":"Example data","title":"Creating ParticipantGroup objects","text":"’s example long formatted consistency test data. three participants. participant 6 trials. trial represented row, holds participant’s ID, grapheme/symbol used, participant’s response color (RGB hex code), time took participant respond grapheme presentation. Note response time data optional - can still use synr don’t .","code":"synr_exampledf_long_small #>    participant_id trial_symbol response_color response_time #> 1               1            A         23F0BE           1.2 #> 2               1            7         99EECC           3.7 #> 3               1            D         001100           2.5 #> 4               1            D         9788DD           1.7 #> 5               1            A         1348CA           0.9 #> 6               1            7         173EF3           2.0 #> 7               2            7         AF7BE3           2.2 #> 8               2            D         FA3388           0.3 #> 9               2            A         5587FF          32.0 #> 10              2            A         0DABC5           8.0 #> 11              2            7         0454A5           6.6 #> 12              2            D         3FD1F8           0.1 #> 13              3            D         03EF88           2.5 #> 14              3            A         78AB33           9.9 #> 15              3            7         F03200           3.9 #> 16              3            7         000000           1.7 #> 17              3            D         FFFFFF           9.3 #> 18              3            A         4811ED           8.1"},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"convert-data-into-a-participantgroup-object","dir":"Articles","previous_headings":"‘Long format’ data","what":"Convert data into a ParticipantGroup object","title":"Creating ParticipantGroup objects","text":"need pass : long-formatted data frame. many trials run grapheme/symbol. name participant ID, grapheme/symbol response color columns. string specifies color space want use (“XYZ”, “sRGB”, “Apple RGB”, “Lab”, “Luv”) later, calculations synr. want, can also specify name column response times, .","code":"pg <- create_participantgroup(   raw_df=synr_exampledf_long_small,   n_trials_per_grapheme=2,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   time_col_name=\"response_time\",   color_space_spec=\"Luv\" )"},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"wide-format-data","dir":"Articles","previous_headings":"","what":"‘Wide format’ data","title":"Creating ParticipantGroup objects","text":"‘Wide format’ data roughly adhere rule one row subject/‘object interest’. consistency tests, means participant single row data frame, multiple columns trial.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"example-data-1","dir":"Articles","previous_headings":"‘Wide format’ data","what":"Example data","title":"Creating ParticipantGroup objects","text":"’s example wide formatted consistency test data. three participants. participant 6 trials. participant represented row. trial represented three columns, e. g. symbol_1, response_color_1 response_time_1 first trial. Note response time data optional - can still use synr don’t .","code":"synr_exampledf_wide_small #>   participant_id symbol_1 response_color_1 response_time_1 symbol_2 #> 1              1        A           23F0BE             1.2        D #> 2              2        7           99EECC             3.7        A #> 3              3        D           001100             2.5        7 #>   response_color_2 response_time_2 symbol_3 response_color_3 response_time_3 #> 1           9788DD             1.7        7           AF7BE3             2.2 #> 2           1348CA             0.9        D           FA3388             0.3 #> 3           173EF3             2.0        A           5587FF            32.0 #>   symbol_4 response_color_4 response_time_4 symbol_5 response_color_5 #> 1        A           0DABC5             8.0        D           03EF88 #> 2        7           0454A5             6.6        A           78AB33 #> 3        D           3FD1F8             0.1        7           F03200 #>   response_time_5 symbol_6 response_color_6 response_time_6 #> 1             2.5        7           000000             1.7 #> 2             9.9        D           FFFFFF             9.3 #> 3             3.9        A           4811ED             8.1"},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"convert-data-into-a-participantgroup-object-1","dir":"Articles","previous_headings":"‘Wide format’ data","what":"Convert data into a ParticipantGroup object","title":"Creating ParticipantGroup objects","text":"need pass : wide-formatted data frame. participant column’s name. number trials used per grapheme (defaults 3) trial columns hold symbols/graphemes displayed participants. trial columns hold participants’ response color RGB hex codes. string specifies color space want use (“XYZ”, “sRGB”, “Apple RGB”, “Lab”, “Luv”) later, calculations synr. want, can also specify regular expression response time columns, .","code":"pg <- create_participantgroup_widedata(   raw_df=synr_exampledf_wide_small,   n_trials_per_grapheme=2,   participant_col_name=\"participant_id\",   symbol_col_regex=\"symbol\",   color_col_regex=\"colou*r\",   time_col_regex=\"response_time\",   color_space_spec=\"Luv\" )"},{"path":"https://datalowe.github.io/synr/articles/synr-creategroup.html","id":"details-about-regular-expression-patterns-in-example","dir":"Articles","previous_headings":"‘Wide format’ data > Convert data into a ParticipantGroup object","what":"Details about regular expression patterns in example","title":"Creating ParticipantGroup objects","text":"regular expression patterns, like ‘symb’ ‘col’ must occur corresponding columns. example data frame, names trial columns color data pattern ‘col’ , color_col_regex = 'col' also work. instance participant ID column called ‘p_id_column”, column name also fit ’col’ pattern, hence color_col_regex = 'col' wouldn’t work. can use long short regular expressions need. example example used color_col_regex = 'response_color_'.","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"synesthesia-and-consistency-testing","dir":"Articles","previous_headings":"Introduction","what":"Synesthesia and consistency testing","title":"synr: Main tutorial","text":"Within synesthesia research, consistency tests often used. Basically, participant presented set stimuli (inducers; e. g. letters, digits, months) respond indicating color (concurrent), , associate grapheme. stimulus repeated certain number times, usually three times, throughout test. participant unusually consistent colors respond , e. g. choosing red color every time ‘’ shown always choosing green color ‘H’, indicates participant might synesthetic grapheme-color associations. might course reasons consistent response patterns, participant employed mnemonic strategies, reason consistency testing often combined measures synesthesia classification. Still, consistency testing widely considered important tool synesthesia research. archetypal form synesthesia, often investigated consistency tests, grapheme-color synesthesia, grapheme refers single written symbol digit letter. Note order make documentation less abstract, synr’s documentation code consistently uses ‘grapheme’ refer consistency test stimuli general. Examples can seen . Note, however, synr can also used data consistency tests involving non-grapheme stimuli (example can found another synr vignette available online). consistency testing, participants’ levels consistency estimated using score based response colors’ color space distances. called different names, ‘color variation score’. Within synr package, term ‘consistency score’ used refer score.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"synrs-purpose","dir":"Articles","previous_headings":"Introduction","what":"synr’s purpose","title":"synr: Main tutorial","text":"aim package facilitate analysis consistency test data providing functionality rolling consistency test data one specialized R object. object, linked methods (functions), constitutes effective interface : Quick access/lookup individual participants’ data. Since different researchers used different color spaces calculate consistency scores, methods include options specifying () different color spaces. Similarly, different algorithms (e. g. manhattan distance Euclidean distance) utilized calculate color space distances. synr allows choosing options also, specifications method calls. identifies participants responses used colors, e. g. black white, data reliable estimating degree synesthetic associations. helps trying identify e. g. participants synesthesia digits, graphemes. useful quick visual inspection participant responses. might aid double checking procedures identifying synesthetes classifying participant data valid/invalid.","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"rolling-up-the-data","dir":"Articles","previous_headings":"Getting started","what":"Rolling up the data","title":"synr: Main tutorial","text":"using synr, main interface data ParticipantGroup class. information convert raw consistency test data ParticipantGroup object, please see separate tutorial Creating ParticipantGroup objects. , ’s assumed raw data ‘long format’, briefly shown : Since data ‘long format’, can used create_participantgroup like : ParticipantGroup object (simply called ‘participantgroup’ ), can start using methods accessing attributes. synr implements reference classes, advanced topic. idea however can learn synr’s articles help documentation use tools without worry work hood.","code":"head(synr_exampledf_long_small) #>   participant_id trial_symbol response_color response_time #> 1              1            A         23F0BE           1.2 #> 2              1            7         99EECC           3.7 #> 3              1            D         001100           2.5 #> 4              1            D         9788DD           1.7 #> 5              1            A         1348CA           0.9 #> 6              1            7         173EF3           2.0 pg <- create_participantgroup(   raw_df=synr_exampledf_long_small,   n_trials_per_grapheme=2,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   time_col_name=\"response_time\",   color_space_spec=\"Luv\" )"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"accessing-participantgroup-data","dir":"Articles","previous_headings":"Getting started","what":"Accessing participantgroup data","title":"synr: Main tutorial","text":"participantgroup nested structure, participantgroup list participants, participant list graphemes. using $ separator, can specify participant /grapheme drill nested structure access data methods need. Let’s start accessing participants’ data. Say want find colors participant ID ‘3’ used symbol ‘’. can using syntax <participantgroup>$participants[['<ID>']]$graphemes[[<symbol>]]. response colors represented nx3 matrix, n number trials per grapheme (2 example). row corresponds one response. three columns correspond dimensions used color space, case ‘L’, ‘u’ ‘v’ (specification color_space_spec = \"Luv\" creating participantgroup). can access participants either row number raw data frame, participant ID. example, happen except one type numeric type character (participant row number 3 raw data frame ID ‘3’), pg$participants[['3']]$graphemes[['']] pg$participants[[3]]$graphemes[['']] work. instead third participant ID ‘jane’, use either pg$participants[['jane']]$graphemes[['']] pg$participants[[3]]$graphemes[['']].","code":"fetched_grapheme_data <- pg$participants[['3']]$graphemes[['A']] fetched_grapheme_data #> Reference class object of class \"Grapheme\" #> Field \"symbol\": #> [1] \"A\" #> Field \"response_colors\": #>          [,1]       [,2]      [,3] #> [1,] 64.41700 -25.894798   66.0961 #> [2,] 33.73906  -2.818399 -123.0723 #> Field \"response_times\": #> [1] 9.9 8.1 #> Field \"color_space\": #> [1] \"Luv\""},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"summarizing-data","dir":"Articles","previous_headings":"","what":"Summarizing data","title":"synr: Main tutorial","text":"method function linked particular R object, synr relies heavily methods. syntax using methods <object>$<method_name>(). examples illustrate .","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"grapheme-level-get_consistency_score","dir":"Articles","previous_headings":"Summarizing data > Consistency scores","what":"grapheme level: get_consistency_score","title":"synr: Main tutorial","text":"can calculate consistency score single grapheme : Specifying participant want participantgroup. Specifying grapheme want participant’s list graphemes. Using grapheme’s method get_consistency_score. many grapheme-level methods, usually need corresponding participant- participantgroup-level methods. reason, examples grapheme-level methods provided tutorial; can instead read help documentation want (run help(Grapheme)).","code":"# fetching the consistency score of the second participant's grapheme 'A' cscore_p2_A <- pg$participants[[2]]$graphemes[['A']]$get_consistency_score() cscore_p2_A #> [1] 76.40256"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participant-level-get_mean_consistency_score","dir":"Articles","previous_headings":"Summarizing data > Consistency scores","what":"participant level: get_mean_consistency_score","title":"synr: Main tutorial","text":"can calculate individual participant’s mean consistency score : Specifying participant want participantgroup. Calling participant’s method get_mean_consistency_score:","code":"mean_cscore_p1 <- pg$participants[['1']]$get_mean_consistency_score() mean_cscore_p1 #> [1] 131.206"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participantgroup-level-get_mean_consistency_scores","dir":"Articles","previous_headings":"Summarizing data > Consistency scores","what":"participantgroup level: get_mean_consistency_scores","title":"synr: Main tutorial","text":"participantgroup method get_mean_consistency_scores calculates mean consistency scores participants, producing numeric vector consistency scores: order mean consistency scores based order participants original raw data frame. form data frame shows participant goes participant score, participantgroup method get_ids comes handy:","code":"mean_cscores <- pg$get_mean_consistency_scores() mean_cscores #> [1] 131.2060 101.3738 151.9597 mean_cscores <- pg$get_mean_consistency_scores() p_ids <- pg$get_ids() mean_scores_df <- data.frame(participant_id=p_ids, mean_consistency_score=mean_cscores) mean_scores_df #>   participant_id mean_consistency_score #> 1              1               131.2060 #> 2              2               101.3738 #> 3              3               151.9597"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"number-of-valid-responses","dir":"Articles","previous_headings":"Summarizing data","what":"Number of valid responses","title":"synr: Main tutorial","text":"often helps see many valid color responses participants provided experiment. ’s common consistency tests provide kind ‘color’ response. usually provided mainly tool people synesthetic associations use non-inducing stimuli, might ‘abused’ people synesthetic associations. mean consistency score meaningless participant instance responded ‘color’ two graphemes’ responsese, since ’s simple memorize colors two symbols. Note synr work, ‘color’ responses must coded NA values. information , please see article Creating ParticipantGroup objects.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participant-level-get_number_all_colored_graphemes","dir":"Articles","previous_headings":"Summarizing data > Number of valid responses","what":"participant level: get_number_all_colored_graphemes","title":"synr: Main tutorial","text":"method returns number graphemes non-NA color responses. Thus, data consistency test 3 trials/grapheme, number graphemes 3 non-NA responses returned. , second participant gave valid (non-NA) color responses 3 graphemes.","code":"num_onlynonna_p2 <- pg$participants[['2']]$get_number_all_colored_graphemes() num_onlynonna_p2 #> [1] 3"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participantgroup-level-get_numbers_all_colored_graphemes","dir":"Articles","previous_headings":"Summarizing data > Number of valid responses","what":"participantgroup level: get_numbers_all_colored_graphemes","title":"synr: Main tutorial","text":"participantgroup method get_numbers_all_colored_graphemes produces numeric vector holds participant’s number valid color responses: three participants gave valid (non-NA) color responses 3 graphemes. values order participants raw data frame, meaning first value corresponds first participant, . course, can combine values participant ID’s just like mean consistency scores:","code":"num_onlynonna <- pg$get_numbers_all_colored_graphemes() num_onlynonna #> [1] 3 3 3 mean_cscores <- pg$get_mean_consistency_scores() num_onlynonna <- pg$get_numbers_all_colored_graphemes() p_ids <- pg$get_ids() ctest_summary_df <- data.frame(   participant_id=p_ids,    mean_consistency_score=mean_cscores,   num_valid_graphemes=num_onlynonna ) head(ctest_summary_df) #>   participant_id mean_consistency_score num_valid_graphemes #> 1              1               131.2060                   3 #> 2              2               101.3738                   3 #> 3              3               151.9597                   3"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"mean-color-response","dir":"Articles","previous_headings":"Summarizing data","what":"Mean color response","title":"synr: Main tutorial","text":"’s sometimes useful calculate participants’ mean color responses. instance, using color space CIELUV, mean ‘L’ value indicates participant tended use lighter darker colors. mean ‘u’ ‘v’ values can useful calculating average chroma, hue saturation values.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participant-level-get_participant_mean_color","dir":"Articles","previous_headings":"Summarizing data > Mean color response","what":"participant level: get_participant_mean_color","title":"synr: Main tutorial","text":"method returns 3-element numeric vector represents participant’s mean response color value color axis 1, 2 3, respectively. E.g. color space ‘sRGB’ specified creating participantgroup object, 1st value corresponds axis ‘R’, 2nd value axis ‘G’, 3rd value axis ‘B’. (code example, values correspond axes ‘L’, ‘u’, ‘v’, color space specified creating participantgroup earlier) participant’s mean response color, disregarding invalid color responses (na.rm=TRUE), ‘L’ value 59, ‘u’ value 0.52 ‘v’ value -57. rest tutorial focus participantgroup-level methods. can find info participant-level methods running help(Participant).","code":"mean_color_vec_p2 <- pg$participants[['2']]$get_participant_mean_color(na.rm=TRUE) mean_color_vec_p2 #> [1]  59.0451936   0.5155495 -57.1274761"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participantgroup-level-get_mean_colors","dir":"Articles","previous_headings":"Summarizing data > Mean color response","what":"participantgroup level: get_mean_colors","title":"synr: Main tutorial","text":"participantgroup method get_mean_colors produces data frame holds participant’s mean color response values, columns represent chosen color space axis 1, 2, 3, respectively (e.g. ‘R’, ‘G’, ‘B’ ‘sRGB’ specified upon participantgroup creation): Since example based participantgroup created color space ‘Luv’ specification, columns correspond CIELUV ‘L’, ‘u’ ‘v’ axes. various ways combine returned data frame participant ID’s, ’s one using R built-cbind function:","code":"mean_colors_df <- pg$get_mean_colors(na.rm=TRUE) mean_colors_df #>   color_axis_1_mean color_axis_2_mean color_axis_3_mean #> 1          51.97727       -23.5237442        -41.054796 #> 2          59.04519         0.5155495        -57.127476 #> 3          55.78877         7.9126543          7.415495 mean_cscores <- pg$get_mean_consistency_scores() num_onlynonna <- pg$get_numbers_all_colored_graphemes() p_ids <- pg$get_ids() ctest_summary_df <- data.frame(   participant_id=p_ids,    mean_consistency_score=mean_cscores,   num_valid_graphemes=num_onlynonna )  mean_color_df <- pg$get_mean_colors(na.rm=TRUE) ctest_summary_df <- cbind(ctest_summary_df, mean_color_df)  head(ctest_summary_df) #>   participant_id mean_consistency_score num_valid_graphemes color_axis_1_mean #> 1              1               131.2060                   3          51.97727 #> 2              2               101.3738                   3          59.04519 #> 3              3               151.9597                   3          55.78877 #>   color_axis_2_mean color_axis_3_mean #> 1       -23.5237442        -41.054796 #> 2         0.5155495        -57.127476 #> 3         7.9126543          7.415495"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"validating-participant-data","dir":"Articles","previous_headings":"Summarizing data","what":"Validating participant data","title":"synr: Main tutorial","text":"synr includes unique procedure validating participant data based estimating varied participants’ color responses . Detailed information available validation-focused online article. rough example explanation follows.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participantgroup-level-check_valid_get_twcv_scores","dir":"Articles","previous_headings":"Summarizing data > Validating participant data","what":"participantgroup level: check_valid_get_twcv_scores","title":"synr: Main tutorial","text":"larger example data frame synr_exampledf_large (3 trials per grapheme) used example: example, basically ask synr check participant , looking letters : used least 3 clearly discernible colors (e. g. ‘red’, ‘yellow’ ‘blue’) otherwise greatly varied responses (e. g. used different shades ‘red’/‘red-orange’ ‘yellow’/‘yellow-green’) given non-NA color responses least 4 letters answered roughly color (say, ‘black’) 60% trials method, unlike ones ’ve seen, returns data frame. Looking , can see data sets except second one classified valid. second data set classified invalid due ‘hi_prop_tight_cluster’, means participant responded roughly color 60% letter trials. ‘twcv’ column gives summary statistic roughly describes much variation participant’s data. ‘num_clusters’ column gives estimate many clearly discernible colors participant repeatedly used. Combining returned mean color response data frame extracted data can done follows: , please see validation-focused article information.","code":"pg_large <- create_participantgroup(   raw_df=synr_exampledf_large,   n_trials_per_grapheme=3,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   color_space_spec=\"Luv\" )  # see separate article for explanation of why 'set.seed' is called set.seed(1)   # call validation method val_df <- pg_large$check_valid_get_twcv_scores(   min_complete_graphemes = 5,   dbscan_eps = 20,   dbscan_min_pts = 4,   max_var_tight_cluster = 150,   max_prop_single_tight_cluster = 0.6,   safe_num_clusters = 3,   safe_twcv = 250,   complete_graphemes_only = TRUE,   symbol_filter = LETTERS )  head(val_df) #>   valid        reason_invalid      twcv num_clusters #> 1  TRUE                       1077.9557            8 #> 2 FALSE hi_prop_tight_cluster  195.1215            2 #> 3  TRUE                       1222.0226            5 #> 4  TRUE                       1568.6686            5 #> 5  TRUE                       3154.0720            4 val_id_df <- cbind(   participant_id=pg_large$get_ids(),   val_df ) head(val_id_df) #>   participant_id valid        reason_invalid      twcv num_clusters #> 1          partA  TRUE                       1077.9557            8 #> 2          partB FALSE hi_prop_tight_cluster  195.1215            2 #> 3          partC  TRUE                       1222.0226            5 #> 4          partD  TRUE                       1568.6686            5 #> 5          partE  TRUE                       3154.0720            4"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"filtering-data","dir":"Articles","previous_headings":"","what":"Filtering data","title":"synr: Main tutorial","text":"Participants synesthetic associations might graphemes used test. instance, participant might synesthetic associations digits, letters, even though categories included test. synr helps apply filters calculate summary statistics subset graphemes. Filters applied passing character vector symbols/graphemes symbol_filter= argument, using participant-level participantgroup-level methods summary statistics.","code":""},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participantgroup-level-filtering","dir":"Articles","previous_headings":"Filtering data","what":"participantgroup level filtering","title":"synr: Main tutorial","text":"produced vector holds participant’s (5 participants case) mean consistency score, taking data trials weekday grapheme account.","code":"weekdays_filter <- c(   'Monday', 'Tuesday', 'Wednesday', 'Thursday',   'Friday', 'Saturday', 'Sunday' ) # note that the 'large' example data (rolled up in 'pg_large') # are used again here cscores_weekdays <- pg_large$get_mean_consistency_scores(symbol_filter=weekdays_filter) cscores_weekdays #> [1] 256.61146  79.72227  63.34418 256.80966  32.72955"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"handling-summary-statistics-efficiently","dir":"Articles","previous_headings":"","what":"Handling summary statistics efficiently","title":"synr: Main tutorial","text":"calculating many statistics synr, putting single data frame becomes unwieldy. may help separate different kinds summary statistics different data frames. data (produced synr sources) need combined, data frames can combined R merge function. simple example follows: key make sure separate data frame includes participant ID’s set ='participant_id' (whatever data frames’ participant ID columns named).","code":"pg <- create_participantgroup(   raw_df=synr_exampledf_large,   n_trials_per_grapheme=3,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   time_col_name=\"response_time\",   color_space_spec=\"Luv\" )  # form first data frame, with consistency scores mean_cscores <- pg$get_mean_consistency_scores() p_ids <- pg$get_ids() cons_df <- data.frame(   participant_id=p_ids,    mean_consistency_score=mean_cscores )  # form second data frame, with validation-related information val_df <- cbind(   participant_id=pg$get_ids(),    pg$check_valid_get_twcv_scores() )  # combine the two data frames, by telling R to 'link them up' # based on the 'participant_id' column cons_val_df <- merge(cons_df, val_df, by='participant_id')  head(cons_val_df) #>   participant_id mean_consistency_score valid        reason_invalid     twcv #> 1          partA              270.62529  TRUE                       3649.047 #> 2          partB               50.55262 FALSE hi_prop_tight_cluster  770.760 #> 3          partC                     NA  TRUE                        531.202 #> 4          partD              271.88148  TRUE                       4806.165 #> 5          partE                     NA  TRUE                       1702.389 #>   num_clusters #> 1            4 #> 2            4 #> 3            6 #> 4            3 #> 5            5"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"visualizing-participant-data","dir":"Articles","previous_headings":"","what":"Visualizing participant data","title":"synr: Main tutorial","text":"can often helpful get overview participants’ response colors grapheme’s consistency score. synr uses ggplot2 achieve .","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participant-level-plotting-get_plot","dir":"Articles","previous_headings":"Visualizing participant data > Producing plots for immediate display","what":"participant level plotting: get_plot","title":"synr: Main tutorial","text":"details get_plot method works, please look documentation Participant class, using help(Participant). , can scroll description get_plot, “Methods”.  left side plot, see graphemes used test, colored participant’s response colors. bars represent consistency score grapheme.","code":"pg_large <- create_participantgroup(   raw_df=synr_exampledf_large,   n_trials_per_grapheme=3,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   color_space_spec=\"Luv\" ) # increase grapheme size and angle them slightly to make them easier to see, # and only include digits and letters (excluding the weekday data in this # example) p6_plot <- pg_large$participants[['partA']]$get_plot(   grapheme_size=2.2,    grapheme_angle=30,   symbol_filter = c(0:9, LETTERS) ) p6_plot"},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participant-level-plot-saving-save_plot","dir":"Articles","previous_headings":"Visualizing participant data > Producing plots and saving them on your computer","what":"participant level plot saving: save_plot","title":"synr: Main tutorial","text":"details save_plot method works, look help(Participant). Scroll description save_plot, “Methods”. essential specify save_dir= argument, want plot saved (including filename end):","code":"pg_large$participants[[6]]$save_plot(   save_dir='path/to/save/folder/',   file_format='png',   grapheme_size=2.2,    grapheme_angle=30 )"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"participantgroup-level-plot-saving-save_plots","dir":"Articles","previous_headings":"Visualizing participant data > Producing plots and saving them on your computer","what":"participantgroup level plot saving: save_plots","title":"synr: Main tutorial","text":"details save_plots method works, run help(ParticipantGroup). Scroll description save_plots, “Methods”. essential specify save_dir= argument, directory want plots saved , file_format= argument:","code":"pg_large$save_plots(   save_dir='path/to/save/folder',   file_format='png',   grapheme_size=2.2,    grapheme_angle=30 )"},{"path":"https://datalowe.github.io/synr/articles/synr-tutorial.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"synr: Main tutorial","text":"additional articles explain synr, including mentioned throughout article. better understand synr used practice, might want read Using synr real data: Coloured vowels (online). detailed technical information synr can find help documentation, mentioned throughout article.","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"clearly-invalid-data","dir":"Articles","previous_headings":"Why validate?","what":"Clearly invalid data","title":"Validating participant color response data","text":"conducting consistency tests participants, might issues response patterns. clear example participant responds red color two trials consistency test, like :  lead low (. e. consistent) consistency score. score, data, considered valid? synesthesia researchers say , everyone definitely say participant don’t report associate color red stimuli used test. Another instance invalid data participant provided ‘color’ (‘color’/‘null’/‘blank’ response alternative provided test) color responses three graphemes. Even participant used one color grapheme thus consistent, ’s high risk participant simply memorized previous responses throughout test since three graphemes keep track .","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"clearly-valid-data","dir":"Articles","previous_headings":"Why validate?","what":"Clearly valid data","title":"Validating participant color response data","text":"clear example valid response data participant used different colors, like :","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"possibly-invalid-data","dir":"Articles","previous_headings":"Why validate?","what":"Possibly invalid data","title":"Validating participant color response data","text":"Many participants response patterns harder judge valid invalid, participants : Used red color just 50% trials. Used different shades red yellow 90% trials. Used black, white blue trials. considered examples invalid data? Opinions bound differ.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"why-validate-summary","dir":"Articles","previous_headings":"Why validate?","what":"Why validate: summary","title":"Validating participant color response data","text":"basic issue participants might give responses vary little color consistency scores mean anything. course least theoretically possible someone truly synesthetic associations single color. consistency test, however, determine whether case, participant instance just likes color red keeps responding since ’s color comes mind don’t stimulus-specific association.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"previously-used-validation-procedures","dir":"Articles","previous_headings":"","what":"Previously used validation procedures","title":"Validating participant color response data","text":"Different research studies handled possibly invalid data differently. (e.g. Cuskley et al., 2019) opted excluding participants respond ‘color’ certain proportion trials. Others (Carmichael et al., 2015; Simner et al., 2006) opted (also) excluding participants respond ‘color’ high proportion trials. Yet others excluded participants based patterns difficult systematically define, pattern involving selecting “e.g. red ‘R’, green ‘G’ blue ‘B’” (Carmichael et al., 2015).","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"data-validation-challenges","dir":"Articles","previous_headings":"Previously used validation procedures","what":"Data validation challenges","title":"Validating participant color response data","text":"Excluding participants based proportion number missing /‘color’ responses relatively straight-forward, though currently widely agreed upon threshold. Excluding participants based responses actual color, little ‘color variation’, raises difficult questions briefly discussed . using criterion allowing say 60% responses ‘color’, one define boundaries color ? instance, teal, turquoise cyan count different colors? image , say ‘blue’ graphemes end, ‘blue-green’ graphemes start?  Even one able consistently define color boundaries, participant happens respond colors right ‘border’ two color ranges? Relating back previous example, ’ve defined ‘blue’ ends ‘bluegreen’ starts, participant might give responses like :  might reasonable placed color border ‘blue’ ‘blue-green’ somewhere right around middle values. categorizing response colors based boundaries, , participant considered 50% ‘blue’, 50% ‘blue-green’ responses. color differences small, human observer doesn’t know anything color borders probably say participant responded one color.","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"simple-measures-of-spread","dir":"Articles","previous_headings":"Finding a general validation procedure","what":"Simple measures of spread","title":"Validating participant color response data","text":"order get away arbitrariness pre-defined ‘color ranges’, discussed , one option use general measurement ‘spread’, similar generally use variance standard deviation statistics. One might consider response colors points 3D color space, e.g. axes ‘red’, ‘blue’ ‘green’ (using RGB color space). example can seen interactive graph . think color data manner, makes sense base measures spread distances color points. simple approach might : Calculate ‘middle’ (‘center gravity’) points located. (interactive graph , ‘middle’ marked black point) measured color point, calculate distance ‘middle’. Add distances divide total number color points. give measure spread based ‘mean distance center gravity (midpoint)’. achieve something analogous variance used one-dimensional data, one may use squared distances ‘middle’ steps 2 3. ’re interested details calculations, see ‘information’ end article. problem simple measures spread sensitive outliers don’t take account responses might ‘grouped together’. instance, consider participant given black color responses 80% time, white color responses rest time. human observer, appear participant used black color far much data say anything. simple measures spread indicate participant response colors varied; since black white extreme opposites, ‘middle’ end quite far groups responses, hence (squared) distances long.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"clustering","dir":"Articles","previous_headings":"Finding a general validation procedure","what":"Clustering","title":"Validating participant color response data","text":"One way take account might patterns response colors use -called clustering (Jain, 2010). general statistical approach identifying groups data belong together includes number specific methods, ‘k-means clustering’ ‘Density-based spatial clustering applications noise’ (DBSCAN; Khan et al., 2014). DBSCAN good fit grouping color responses since doesn’t make assumptions shape number clusters. See ‘information’ end article find DBSCAN . understand clustering specifically DBSCAN color data, visualization helps. Let’s say participant set response colors described interactive graph: typical human observer, looks like groups black, red white color responses, respectively. Apart , color responses don’t seem part particular pattern. (white color points hard make graph white background - might help touch/hover mouse around ‘white corner’ highlighted) Applying DBSCAN recoloring color points according cluster belong , result might look something like : following clusters identified: Cluster 0: ‘noise’ cluster, includes points weren’t included specific cluster. Cluster 1: white color responses (presented dark blue). Cluster 2: intensely red color responses (presented blue-green color). Cluster 3: black color responses (presented green). Cluster 4: red, less intense, color responses (presented yellow color). might need go back forth times previous two graphs make sense. might agree DBSCAN clustered together ‘white’ (cluster 1) ‘black’ (cluster 3) color points, respectively. Depending perceive define colors, might agree disagree ‘red’ color points grouped two separate clusters. point using DBSCAN, one can explicit color points clustered together instead relying post-hoc subjective judgments arbitrary pre-defined ‘color borders’ discussed earlier. clustering happens primarily determined ‘epsilon’ (eps) ‘minimum points cluster’ (minPts) parameters - see ‘information’ section. DBSCAN however sufficient validating color response data. reason doesn’t take account happens ‘within’ clusters. participant might vary responses much end ‘noise’ cluster. , might responses similar ’s seen : DBSCAN consider points form single cluster, since every single point least one ‘neighbor’ linking greater cluster. Granted, ’s unlikely participant respond particular manner, phenomenon fairly spread points ‘chained together’ happen real data. Thus, simply counting number clusters isn’t enough able determine validity color response data.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"combining-measure-of-spread-and-dbscan","dir":"Articles","previous_headings":"Finding a general validation procedure","what":"Combining measure of spread and DBSCAN","title":"Validating participant color response data","text":"order take account relevant information, synr uses approach validating participant data based combining DBSCAN ‘variance-like’ measure spread described earlier. part validation procedure, synr calculates total within-cluster variance (TWCV). modified measure data’s total variance takes account clustering data. can find details reading help documentation synr total_within_cluster_variance function. follows rough overview example synr’s validation procedure applied. assumed participant data consistency test grapheme presented 3 trials. Many aspects validation specified user, example values (marked bold) used make example concrete. participant less 6 graphemes complete color responses (3 color responses aren’t type ‘blank’/‘color’), data directly classified invalid. Data graphemes non-complete color responses filtered away. DBSCAN applied find clusters color points ‘complete grapheme’ data. ‘variance’ cluster calculated. TWCV calculated. single low-variance cluster, ie ‘tight-knit’ cluster, includes 60% color points, participant data classified invalid. steps 1-6 cleared: DBSCAN identified 4 clusters (roughly meaning 4 colors used multiple responses), participant data classified valid. TWCV score 250 , participant data classified valid. words, participant data clusters, TWCV score 250, classified invalid. approach enables invalidating data participants used one just colors much, still validating different valid patterns responding.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"applying-synrs-validation-procedure-check_valid_get_twcv_scores","dir":"Articles","previous_headings":"","what":"Applying synr’s validation procedure, check_valid_get_twcv_scores","title":"Validating participant color response data","text":"first need participantgroup (see quickstart/main tutorial new ) Note color space specification (color_space_spec) also affect synr’s validation procedure. recommended use CIELUV (‘Luv’) color space aims line human perception. might noticed RGB used interactive graphs earlier ’s fairly intuitive, suitable validation procedures. Now participantgroup, want use check_valid_get_twcv_scores method. applies validation procedure, similar one outlined , per-participant basis participants group. method’s parameters output explained . Parameters min_complete_graphemes minimum number graphemes complete (non-NA color) responses participant’s data must categorized invalid based criterion. dbscan_eps Radius ‘epsilon neighborhood’ applying DBSCAN clustering. dbscan_min_pts Minimum number points required epsilon neighborhood core points (including core point ) applying DBSCAN clustering. max_var_tight_cluster Maximum variance identified DBSCAN cluster considered ‘tight-knit’. max_prop_single_tight_cluster Maximum proportion color points allowed within single ‘tight-knit’ cluster (participant’s data exceed limit, classified invalid). safe_num_clusters Minimum number identified DBSCAN clusters (including ‘noise’ cluster consists least dbscan_min_pts points) guarantees validity participant’s data points ‘non-tight-knit’. safe_twcv Minimum total within-cluster variance (TWCV) score guarantees participant’s data’s validity points ‘non-tight-knit’. complete_graphemes_only TRUE, data graphemes complete sets associated color responses used clustering variance calulations. FALSE, even data graphemes ‘incomplete’ response data included. symbol_filter character vector (NULL) specifies graphemes’ data use. NULL, data participants’ graphemes (apart filtering based complete response data) used. Output data frame columns: valid Holds TRUE participants whose data classified valid, FALSE participants whose data classified invalid. reason_invalid Strings describe participant data deemed invalid. Participants whose data classified valid empty strings . twcv Numeric column holds participants’ calculated TWCV scores. num_clusters Numeric column participant holds number identified clusters (including ‘noise’ cluster consists least dbscan_min_pts points). Note set.seed(1) call. necessary replication. DBSCAN uses partially random procedure determining clusters. practice, tested main developer (see ), results always , unusual sets data results might differ. Hence, set.seed(<number>) always included code save/share, absolutely certain check_valid_get_twcv_scores produce output run . Similar synr methods’ outputs, order tell classification goes participant, combine output results get_ids.","code":"# if you don't already have synr loaded, run 'library(synr)' first pg <- create_participantgroup(   raw_df=synr_exampledf_large,   n_trials_per_grapheme=3,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   time_col_name=\"response_time\", # optional, not necessary for core functionality   color_space_spec=\"Luv\" ) set.seed(1) val_df <- pg$check_valid_get_twcv_scores(   min_complete_graphemes = 4,   dbscan_eps = 20,   dbscan_min_pts = 4,   max_var_tight_cluster = 150,   max_prop_single_tight_cluster = 0.6,   safe_num_clusters = 3,   safe_twcv = 250,   complete_graphemes_only = TRUE,   symbol_filter = LETTERS )  head(val_df) #>   valid        reason_invalid      twcv num_clusters #> 1  TRUE                       1077.9557            8 #> 2 FALSE hi_prop_tight_cluster  195.1215            2 #> 3  TRUE                       1222.0226            5 #> 4  TRUE                       1568.6686            5 #> 5  TRUE                       3154.0720            4 val_id_df <- cbind(list(participant_id=pg$get_ids()), val_df)  head(val_id_df) #>   participant_id valid        reason_invalid      twcv num_clusters #> 1          partA  TRUE                       1077.9557            8 #> 2          partB FALSE hi_prop_tight_cluster  195.1215            2 #> 3          partC  TRUE                       1222.0226            5 #> 4          partD  TRUE                       1568.6686            5 #> 5          partE  TRUE                       3154.0720            4"},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"parameter-values-and-previous-applications-of-synrs-data-validation","dir":"Articles","previous_headings":"Applying synr’s validation procedure, check_valid_get_twcv_scores","what":"Parameter values and previous applications of synr’s data validation","title":"Validating participant color response data","text":"approach using DBSCAN together 3D ‘variance’ scores validation consistency test data , far, unique synr. Thus, norms regarding particular values used. main developer synr (Lowe Wilsson) applied check_valid_get_twcv_scores sample consistency test data 268 participants exact values specified example , compared results independent classifications human raters. data sample included digit letter graphemes, grapheme used 3 trials. Classifications made separately digit letter categories. validity criteria used human raters example sudy chiefly participants needed least 4 graphemes ‘complete responses’ (ie 3 non-‘blank’ color responses) category considered, used least three different colors (eg yellow, red, orange), didn’t use color 60% responses. classifications produced synr compared human raters, agreement handful participants. cases, turned human raters missed detail, eg participants used color just 60% responses erroneously classified valid. one case, participant responded different shades red somewhat close orange, leading disagreement among human raters. end, discussion consensus synr’s classifications accurate cases.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Validating participant color response data","text":"synr uses novel approach validating participant data shows great promise. likely reduce time spent manually sorting consistency test data. , lets researchers clearly specify operationalize valid data criteria. procedure involves abstract concepts like ‘total within-cluster variance’, benefit rely diffuse concepts like ‘number colors’. Note synr ‘invalid’ classification essentially means ’s inappropriate simply feed data consistency scoring algorithms. ’s users decide handle participants ‘invalid’ data, eg excluding analyses entirely considering non-synesthetes. response patterns make sense humans picked DBSCAN. example using __o__range color grapheme ‘O’, found one study (Simner et al., 2006) frequent among self-reported non-synesthetes low consistency scores among self-reported synesthetes. validity assessments take subjective patterns account (done e. g. Carmichael et al., 2015), synr needs complemented human ratings. synr used data validation please reference synr (now, https://cran.r-project.org/package=synr) include code /values passed check_valid_get_twcv_scores reporting results. ’s also important avoid post-hoc definitions validation criteria. Thus, ’s feasible, please decide starting data collection, based smaller initial sample, values use check_valid_get_twcv_scores.","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"dbscan","dir":"Articles","previous_headings":"More information","what":"DBSCAN","title":"Validating participant color response data","text":"3-minute YouTube video giving brief introduction DBSCAN: https://www.youtube.com/watch?v=_A9Tq6mGtLI. Official documentation dbscan package: https://www.rdocumentation.org/packages/dbscan/versions/1.1-8 Apart sources, new clustering might find helpful search introductory material clustering general, multiple visualizations applying DBSCAN specifically. particular, documentation dbscan package might make much sense understand theoretical background.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"data-validation-in-synr","dir":"Articles","previous_headings":"More information","what":"Data validation in synr","title":"Validating participant color response data","text":"details data validation-related procedures can found synr’s documentation following functions (access documentation running e.g. ?synr::centroid_3d_sq_dist): centroid_3d_sq_dist total_within_cluster_variance validate_get_twcv can also find higher-level information documentation check_valid_get_twcv_scores method running ?synr::ParticipantGroup.","code":""},{"path":"https://datalowe.github.io/synr/articles/validate-data.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Validating participant color response data","text":"Carmichael, D. ., , M. P., Shillcock, R. C., Eagleman, D. M., & Simner, J. (2015). Validating standardised test battery synesthesia: Synesthesia Battery reliably detect synesthesia? Consciousness Cognition, 33, 375–385. Cuskley, C.1, Dingemanse, M.1, van Leeuwen, T. & Kirby, S. 2019. Cross-modal associations synaesthesia: Categorical perception structure vowel-colour mappings large online sample. Behaviour Research Methods, doi: 10.3758/s13428-019-01203-7 Khan, K., Rehman, S. U., Aziz, K., Fong, S., & Sarasvady, S. (2014). DBSCAN: Past, present future. Fifth International Conference Applications Digital Information Web Technologies (ICADIWT 2014), 232–238. Jain, . K. (2010). Data clustering: 50 years beyond K-means. Pattern Recognition Letters, 31(8), 651–666. Simner, J., Mulvenna, C., Sagiv, N., Tsakanikos, E., Witherby, S. ., Fraser, C., Scott, K., & Ward, J. (2006). Synaesthesia: prevalence atypical cross-modal experiences. Perception, 35(8), 1024–1033.","code":""},{"path":"https://datalowe.github.io/synr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lowe Wilsson. Author, maintainer.","code":""},{"path":"https://datalowe.github.io/synr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilsson L (2025). synr: Explore Process Synesthesia Consistency Test Data. R package version 1.0.0, https://github.com/datalowe/synr, https://datalowe.github.io/synr/.","code":"@Manual{,   title = {synr: Explore and Process Synesthesia Consistency Test Data},   author = {Lowe Wilsson},   year = {2025},   note = {R package version 1.0.0, https://github.com/datalowe/synr},   url = {https://datalowe.github.io/synr/}, }"},{"path":"https://datalowe.github.io/synr/index.html","id":"synr-","dir":"","previous_headings":"","what":"Explore and Process Synesthesia Consistency Test Data","title":"Explore and Process Synesthesia Consistency Test Data","text":"R package working data resulting grapheme-color synesthesia-related consistency tests. synr provides tools exploring test data, including visualizing single participant’s data, applying summarizing functions calculating color variation/consistency scores classifying participant data valid invalid.","code":""},{"path":"https://datalowe.github.io/synr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explore and Process Synesthesia Consistency Test Data","text":"synr available CRAN, meaning can simply: Note also install packages synr depends unless already (dbscan, data.table ggplot2).","code":"install.packages('synr')"},{"path":"https://datalowe.github.io/synr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Explore and Process Synesthesia Consistency Test Data","text":"data appropriately formatted data frame/tibble (‘long format’ - see vignettes information), everything starts rolling participant data ‘ParticipantGroup’ object create_participantgroup_widedata: Using resulting object (pgroup), can call various methods. examples follow.","code":"library(synr)  pgroup <- create_participantgroup(     formatted_df, # data frame/tibble to use, with data in 'long format'     n_trials_per_grapheme=3, # number of trials that grapheme was used for     participant_col_name=\"participant_id\", # name of column which holds participant ID's     symbol_col_name='symbol', # name of column which holds grapheme symbol strings     color_col_name='color', # rname of column which holds response color HEX codes     color_space_spec = \"Luv\" # color space to use for all calculations with participant group )"},{"path":"https://datalowe.github.io/synr/index.html","id":"example-group-level-method-get_mean_consistency_scores","dir":"","previous_headings":"Usage","what":"Example group-level method: get_mean_consistency_scores","title":"Explore and Process Synesthesia Consistency Test Data","text":"pgroup$get_mean_consistency_scores(symbol_filter=LETTERS) return vector CIELUV-based consistency scores, using data trials involving capital letters.","code":""},{"path":"https://datalowe.github.io/synr/index.html","id":"example-group-level-method-check_valid_get_twcv_scores","dir":"","previous_headings":"Usage","what":"Example group-level method: check_valid_get_twcv_scores","title":"Explore and Process Synesthesia Consistency Test Data","text":"pgroup$check_valid_get_twcv_scores(symbol_filter=0:9) return data frame describes classifications participant data, data set classified ‘invalid’ ‘valid’, based largely DBSCAN clustering. may used identify participants varied responses little, e. g. responding orange color every trial.","code":""},{"path":"https://datalowe.github.io/synr/index.html","id":"example-participant-level-method-get_plot","dir":"","previous_headings":"Usage","what":"Example participant-level method: get_plot","title":"Explore and Process Synesthesia Consistency Test Data","text":"pgroup$participants[[1]]$get_plot(symbol_filter=LETTERS) produce bar plot per-grapheme consistency scores single participant, using data trials involving capital letters. can see example .","code":""},{"path":"https://datalowe.github.io/synr/index.html","id":"detailed-usage-information","dir":"","previous_headings":"Usage","what":"Detailed usage information","title":"Explore and Process Synesthesia Consistency Test Data","text":"details required data format use functions can found package’s vignettes, also included package (run help(synr) find ). Additional information available following article: Wilsson, L., van Leeuwen, T.M. & Neufeld, J. synr: R package handling synesthesia consistency test data. Behav Res 55, 4086–4098 (2023). https://doi.org/10.3758/s13428-022-02007-y","code":""},{"path":"https://datalowe.github.io/synr/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"Explore and Process Synesthesia Consistency Test Data","text":"suggestions improvements welcome directly raise issues commit code improvements github repository https://github.com/datalowe/synr.","code":""},{"path":"https://datalowe.github.io/synr/reference/Grapheme-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A Reference Class for representing consistency test graphemes — Grapheme-class","title":"A Reference Class for representing consistency test graphemes — Grapheme-class","text":"Reference Class representing consistency test graphemes","code":""},{"path":"https://datalowe.github.io/synr/reference/Grapheme-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A Reference Class for representing consistency test graphemes — Grapheme-class","text":"symbol one-element character vector containing symbol/set symbols describe(s) grapheme, e. g. '7' 'Monday'. Set class new() call using set_symbol method. response_colors matrix row specifies color coordinates participant response. Set using set_colors method. response_times numeric vector response times. Set using set_times method. color_space one-element character vector describes color space response colors coded . Set using set_colors method.","code":""},{"path":"https://datalowe.github.io/synr/reference/Grapheme-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A Reference Class for representing consistency test graphemes — Grapheme-class","text":"get_abbreviated_symbol() Return short (3 character) representation grapheme's symbol. get_consistency_score(na.rm = FALSE, method = \"euclidean\") Calculate consistency score based Grapheme instance's response colors. Throws error responses registered yet. Always returns NA grapheme responses NA. na.rm=FALSE, returns NA grapheme response NA. na.rm=TRUE, returns consistency score non-NA responses. function relies base/stats function dist() supports distance calculation methods implemented dist() (use help(dist) learn ). get_mean_color(na.rm = FALSE) Average registered response colors return result (using color space set grapheme initialization) 3-element vector. Example: color space RGB, element 1 represents mean R value, element 2 mean G value, element 3 B value. na.rm=FALSE response colors missing, return 3-element NA vector. na.rm=TRUE, return 3-element NA vector response colors missing, otherwise return mean available colors. get_mean_response_time(na.rm = FALSE) Get mean grapheme's associated response times. get_num_non_na_colors() Get number response colors non-NA, returned one-element numeric vector. get_plot_data_list() Get list grapheme's data, bundled format ready use Participant.get_plot_data() method row plot data. has_only_non_na_colors() Returns TRUE grapheme responses valid colors, FALSE responses nonvalid colors responses . set_colors(hex_codes, color_space_spec) Set response colors, using passed RGB hex codes. Converts hex codes color coordinates specified color space. Supports following color spaces: \"XYZ\", \"sRGB\", \"Apple RGB\", \"Lab\", \"Luv\". NA values passed, row NA values included matrix (preserving order responses). Returned/set response colors format matrix row represents one response/color, column represents one color coordinate axis (always 3 axes used currently supported color spaces) set_symbol(symbol_chars) Set grapheme's symbol attribute, using passed one-element character vector. set_times(times) Add response times, using passed numeric vector.","code":""},{"path":"https://datalowe.github.io/synr/reference/Grapheme-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Reference Class for representing consistency test graphemes — Grapheme-class","text":"","code":"a <- synr::Grapheme$new(symbol='a') a$set_colors(c(\"#101010\", NA), \"Luv\") a$set_times(c(5, 10)) a$get_num_non_na_colors() #> [1] 1"},{"path":"https://datalowe.github.io/synr/reference/Participant-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A Reference Class for representing consistency test participants — Participant-class","title":"A Reference Class for representing consistency test participants — Participant-class","text":"Reference Class representing consistency test participants","code":""},{"path":"https://datalowe.github.io/synr/reference/Participant-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A Reference Class for representing consistency test participants — Participant-class","text":"id one-element character vector containing participant's ID. Set class new() call. test_date one-element Date vector specifies date participant consistency test. graphemes list Grapheme class instances.","code":""},{"path":"https://datalowe.github.io/synr/reference/Participant-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A Reference Class for representing consistency test participants — Participant-class","text":"add_grapheme(grapheme) Add passed grapheme participant's list graphemes. grapheme's entry list named based grapheme's symbol. Note try add grapheme symbol identical one graphemes already participant's list graphemes, already existing -symbol grapheme overwritten. add_graphemes(grapheme_list) Go passed list Grapheme instances add one using add_grapheme() method. check_valid_get_twcv(   min_complete_graphemes = 5,   dbscan_eps = 20,   dbscan_min_pts = 4,   max_var_tight_cluster = 150,   max_prop_single_tight_cluster = 0.6,   safe_num_clusters = 3,   safe_twcv = 250,   complete_graphemes_only = TRUE,   symbol_filter = NULL ) Checks participant's data valid based passed arguments.     method aims identify participants responses     varied response colors little, marking invalid.     Note absolutely correct values, 'little     variation' highly subjective. might need tweak parameters     line project's criteria, especially use another color     space CIELUV, since default values based seems     make sense CIELUV context. use results     research article, make sure reference synr specify parameter     values passed function. method relies heavily DBSCAN algorithm package     'dbscan', involves calculating synr-specific 'Total Within-Cluster     Variance' (TWCV) score. can find information,     parameters mean,     documentation function validate_get_twcv.   get_all_colored_symbols(symbol_filter = NULL) Returns character vector symbols corresponding graphemes responses associated non-NA color. character vector passed symbol_filter, symbols passed vector returned. get_consistency_scores(   method = \"euclidean\",   symbol_filter = NULL,   na.rm = FALSE ) Returns list grapheme symbols associated consistency scores.       na.rm = TRUE, grapheme consistency score calculation       forced (except response colors associated grapheme       NA). probably want, leads things       like perfect consistency score except one response color       NA. Defaults na.rm = FALSE. character vector passed       symbol_filter, consistency scores graphemes symbols       passed vector returned. Use method argument specify kind color space       distances used calculating consistency score       (usually 'manhattan' 'euclidean' - see documentation       base R dist function options) get_grapheme_mean_colors(symbol_filter = NULL, na.rm = FALSE) Returns list grapheme symbols associated mean colors,       using color space set participant creation. Colors represented       3-element vectors. Example: color space RGB, vector element 1 represents       grapheme mean R value, element 2 mean G value, element 3       B value. na.rm = TRUE, grapheme mean color calculated even       one associated response colors missing. Defaults       na.rm = FALSE. character vector passed symbol_filter,       mean colors graphemes symbols       passed vector returned. get_mean_consistency_score(   symbol_filter = NULL,   method = \"euclidean\",   na.rm = FALSE ) Returns mean consistency score respect       Grapheme instances associated participant. na.rm = FALSE, calculates mean consistency score       participants' graphemes response       colors non-NA, otherwise returns NA.       na.rm = TRUE, returns mean consistency score       participant's graphemes       non-NA response colors, ignoring graphemes       least one NA response color value. Note       NA returned either case, participants'       graphemes least one NA response color value. character vector passed       symbol_filter, data graphemes symbols       passed vector used calculating       mean score. Use method argument specify kind color space       distances used calculating consistency score       (usually 'manhattan' 'euclidean' - see documentation       base R dist function options) get_mean_response_time(symbol_filter = NULL, na.rm = FALSE) Returns mean response time, respect Grapheme instances associated participant. Weights response times based number valid responses grapheme . na.rm = TRUE, returns mean response time even missing response times. na.rm = FALSE, returns mean response time least one response time value least one participants' graphemes. character vector passed symbol_filter, data graphemes symbols passed vector used calculating mean response time. get_nonna_color_resp_mat(symbol_filter = NULL) Returns n--3 matrix non-NA color responses' data, column represents color axis row response color. character vector passed symbol_filter, data responses associated graphemes corresponding symbols included. get_number_all_colored_graphemes(symbol_filter = NULL) Returns number graphemes responses associated non-NA color. character vector passed symbol_filter, graphemes symbols passed vector counted. get_participant_mean_color(symbol_filter = NULL, na.rm = FALSE) Returns average participants' registered       response colors (based color space       set participant initialization) 3-element vector.       Example: color space RGB, element 1 represents       mean R value, element 2 mean G value, element 3       B value. character vector passed       symbol_filter, data graphemes symbols       passed vector used calculating       mean color. na.rm = FALSE, calculates mean response color       participants' graphemes response       colors non-NA, otherwise returns NA.       na.rm = TRUE, returns mean response color based       non-NA response colors. get_plot(   cutoff_line = FALSE,   mean_line = FALSE,   grapheme_size = 2,   grapheme_angle = 0,   grapheme_spacing = 0.25,   foreground_color = \"black\",   background_color = \"white\",   symbol_filter = NULL ) Returns ggplot2 plot describes participant's       grapheme color responses per-grapheme consistency scores. cutoff_line = TRUE, plot include blue line       indicates value 135.30, synesthesia       cut-score recommended Rothen, Seth, Witzel & Ward (2013)       L*u*v color space. mean_line = TRUE, plot       include green line indicates participant's mean       consistency score graphemes -valid       response colors (participant graphemes). vector       passed symbol_filter, green line represents mean score       symbols included filter. Pass value grapheme_size adjust size graphemes       shown bottom plot, e. g. increasing size       lot empty space otherwise, decreasing size       graphemes fit. grapheme_angle       argument allows rotating graphemes. grapheme_spacing adjusting       far grapheme symbols spaced . character vector passed symbol_filter, data graphemes       symbols passed vector used. Graphemes sorted left--right 1. length       2. unicode value (means among things digits       come letters). get_plot_data(symbol_filter = NULL) Returns data frame following columns: 1. grapheme (grapheme names - type character) 2. consistency_score (type numeric) 3... color_resp<x>, x digit: hold response hex color codes       (number columns depends number response colors       associated grapheme). data frame intended used plotting participant data,       using .get_plot(). call end error       participant's graphemes number       color responses. intended. character vector passed symbol_filter, data graphemes       symbols passed vector used. get_symbols() Returns character vector symbols graphemes associated participant. has_graphemes() Returns TRUE least one grapheme participant's graphemes list, otherwise returns FALSE save_plot(   save_dir = NULL,   file_format = \"png\",   dpi = 300,   cutoff_line = FALSE,   mean_line = FALSE,   grapheme_size = 2,   grapheme_angle = 0,   foreground_color = \"black\",   background_color = \"white\",   symbol_filter = NULL,   ... ) Saves ggplot2 plot describes participant's       grapheme color responses per-grapheme consistency scores,       using ggsave function. character vector passed symbol_filter, data graphemes       symbols passed vector used. save_dir specified, plot saved current       working directory. Otherwise, plot saved specified       directory. file saved using specified file_format,       e. g. JPG (see ggplot2::ggsave documentation list       supported formats), resolution specified       dpi argument. cutoff_line = TRUE, plot include blue line       indicates value 135.30, synesthesia       cut-score recommended Rothen, Seth, Witzel & Ward (2013)       L*u*v color space. mean_line = TRUE, plot       include green line indicates participant's mean       consistency score graphemes -valid response colors       (participant graphemes). vector       passed symbol_filter, green line represents mean score       symbols included filter. Pass value grapheme_size adjust size graphemes       shown bottom plot, e. g. increasing size       empty space otherwise, decreasing size       graphemes fit. Similarly, can use grapheme_angle       argument rotate graphemes, might help fit better. Apart , arguments       ggsave accepts (e. g. 'scale') also work function, since       arguments passed ggsave. set_date(in_date) Takes one-element character vector date format 'YYYY-MM-DD' sets participant's test_date specified date.","code":""},{"path":"https://datalowe.github.io/synr/reference/Participant-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"A Reference Class for representing consistency test participants — Participant-class","text":"min_complete_graphemes minimum number graphemes           complete (non-NA color) responses participant data           must categorized invalid based           criterion. Defaults 5. dbscan_eps Radius 'epsilon neighborhood' applying           DBSCAN clustering. Defaults 20. dbscan_min_pts Minimum number points required           epsilon neighborhood core points (including core point           ). Defaults 4. max_var_tight_cluster Maximum variance identified           DBSCAN cluster considered 'tight-knit'. Defaults 150. max_prop_single_tight_cluster Maximum proportion           points allowed within single 'tight-knit' cluster (exceeding           leads classification invalid). Defaults 0.6. safe_num_clusters Minimum number identified DBSCAN           clusters (including 'noise' cluster consists least           'dbscan_min_pts' points) guarantees validity           points 'non-tight-knit'. Defaults 3. safe_twcv Minimum total within-cluster variance (TWCV)           score guarantees validity points 'non-tight-knit'.           Defaults 250. complete_graphemes_only logical vector. TRUE,           data graphemes non-NA color responses           used; FALSE, even data graphemes NA color           responses used. Defaults TRUE. symbol_filter character vector (NULL) specifies           graphemes' data use. Defaults NULL, meaning data           participant's graphemes used.","code":""},{"path":"https://datalowe.github.io/synr/reference/Participant-class.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"A Reference Class for representing consistency test participants — Participant-class","text":"list components valid TRUE categorized valid, otherwise FALSE. reason_invalid One-element character vector describing           participant's data deemed invalid, empty string           valid TRUE. twcv One-element numeric (NA /          graphemes complete responses) vector indicating participant's           calculated TWCV. num_clusters One-element numeric (NA /          graphemes complete responses) vector indicating           number identified clusters counting toward           tally compared 'safe_num_clusters'.","code":""},{"path":"https://datalowe.github.io/synr/reference/ParticipantGroup-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A Reference Class for representing a group of consistency test participants — ParticipantGroup-class","title":"A Reference Class for representing a group of consistency test participants — ParticipantGroup-class","text":"Reference Class representing group consistency test participants","code":""},{"path":"https://datalowe.github.io/synr/reference/ParticipantGroup-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A Reference Class for representing a group of consistency test participants — ParticipantGroup-class","text":"participants list Participant class instances.","code":""},{"path":"https://datalowe.github.io/synr/reference/ParticipantGroup-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A Reference Class for representing a group of consistency test participants — ParticipantGroup-class","text":"add_participant(participant) Add passed participant participantgroup's list participants. participant's entry list named based participant's id. Note try add participant id identical one participants already participantgroup's list participants, already existing -id participant overwritten. add_participants(participant_list) Go passed list Participant instances add one using add_participant() method. check_valid_get_twcv_scores(   min_complete_graphemes = 5,   dbscan_eps = 20,   dbscan_min_pts = 4,   max_var_tight_cluster = 150,   max_prop_single_tight_cluster = 0.6,   safe_num_clusters = 3,   safe_twcv = 250,   complete_graphemes_only = TRUE,   symbol_filter = NULL ) Checks participants' data valid based passed arguments.     method aims identify participants responses     varied response colors little, marking invalid.     Note absolutely correct values, 'little     variation' highly subjective. might need tweak parameters     line project's criteria, especially use another color     space CIELUV, since default values based seems     make sense CIELUV context. use results     research article, make sure reference synr specify parameter     values passed function. method relies heavily DBSCAN algorithm package     'dbscan', involves calculating synr-specific 'Total Within-Cluster     Variance' (TWCV) score. can find information,     parameters mean,     documentation function validate_get_twcv. Note     DBSCAN clustering related calculations performed     per-participant basis, summarized data frame     returned method.   get_ids() Returns character vector ids participants associated participantgroup. get_mean_colors(symbol_filter = NULL, na.rm = FALSE) Returns nx3 data frame mean colors       participants group, columns       represent chosen color space axis 1, 2, 3, respectively       (e.g. 'R', 'G', 'B' 'sRGB' specified upon participantgroup       creation). na.rm=FALSE,       participant calculates mean color       participants' graphemes response       colors non-NA, otherwise puts NA values       participant's row matrix. na.rm=TRUE,       participant calculates mean color       participant's valid response colors,       ignoring NA response colors. Note       participants whose graphemes least one NA       response color value, NA put row corresponding       participant, regardless na.rm set . character vector passed symbol_filter,       data graphemes symbols passed vector       used calculating participant's mean color. get_mean_consistency_scores(   method = \"euclidean\",   symbol_filter = NULL,   na.rm = FALSE ) Returns vector mean consistency scores       participants group. na.rm=FALSE,       participant calculates mean consistency score       participants' graphemes response       colors non-NA, otherwise puts NA value       participant returned vector. na.rm=TRUE,       participant calculates mean consistency score       participant's graphemes       non-NA response colors, ignoring graphemes       least one NA response color value. Note       participants whose graphemes least one NA       response color value, NA put returned vector       participant, regardless na.rm set . character vector passed symbol_filter,       data graphemes symbols passed vector       used calculating participant's mean score. Use method argument specify kind color space       distances used calculating consistency scores       (usually 'manhattan' 'euclidean' - see documentation       base R dist function options) get_mean_response_times(symbol_filter = NULL, na.rm = FALSE) Returns mean response times, respect Grapheme instances associated participant. na.rm=TRUE, participant returns mean response time even missing response times. na.rm=FALSE, returns mean response time least one response time value least one participants' graphemes. character vector passed symbol_filter, data graphemes symbols passed vector used calculating participant's mean response time. get_numbers_all_colored_graphemes(symbol_filter = NULL) Returns vector numbers representing many graphemes -valid (non-na) response colors participant .  character vector passed symbol_filter, data connected graphemes symbols passed vector used. has_participants() Returns TRUE least one participant participantgroup's participants list, otherwise returns FALSE save_plots(   save_dir = NULL,   file_format = \"png\",   dpi = 300,   cutoff_line = FALSE,   mean_line = FALSE,   grapheme_size = 2,   grapheme_angle = 0,   foreground_color = \"black\",   background_color = \"white\",   symbol_filter = NULL,   ... ) Goes participants one produces saves     ggplot2 plot describes participant's     grapheme color responses per-grapheme consistency scores,     using ggsave function. character vector passed symbol_filter, data graphemes     symbols passed vector used. path specified, plots saved current     working directory. Otherwise, plots saved specified     directory. file saved using specified file_format,     e. g. JPG (see ggplot2::ggsave documentation list     supported formats), resolution specified     dpi argument. cutoff_line=TRUE, plot include blue line     indicates value 135.30, synesthesia cut-score     recommended Rothen, Seth, Witzel & Ward (2013) L*u*v     color space. mean_line=TRUE, plot include green line     indicates participant's mean consistency score     graphemes -valid response colors (participant     graphemes). vector passed symbol_filter,     green line represents mean score     symbols included filter. Pass value grapheme_size adjust size graphemes     shown bottom plot, e. g. increasing size     empty space otherwise, decreasing size     graphemes fit. Similarly, can use grapheme_angle     argument rotate graphemes, might help fit better. Apart ones , arguments     ggsave accepts (e. g. 'scale') also work function, since     arguments passed ggsave.","code":""},{"path":"https://datalowe.github.io/synr/reference/ParticipantGroup-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"A Reference Class for representing a group of consistency test participants — ParticipantGroup-class","text":"min_complete_graphemes minimum number graphemes           complete (non-NA color) responses participant's data           must categorized invalid based           criterion. Defaults 7. dbscan_eps Radius 'epsilon neighborhood' applying           (per-participant basis) DBSCAN clustering. Defaults 30. dbscan_min_pts Minimum number points required           epsilon neighborhood core points (including core point           ). Defaults 4. max_var_tight_cluster Maximum variance identified           DBSCAN cluster considered 'tight-knit'. Defaults 150. max_prop_single_tight_cluster Maximum proportion           points allowed within single 'tight-knit' cluster (          participant's data exceed limit, classified           invalid). Defaults 0.6. safe_num_clusters Minimum number identified DBSCAN           clusters (including 'noise' cluster consists least           'dbscan_min_pts' points) guarantees validity           participant's data points 'non-tight-knit'. Defaults 3. safe_twcv Minimum total within-cluster variance (TWCV)           score guarantees participant's data's validity points           'non-tight-knit'. Defaults 250. complete_graphemes_only logical vector. TRUE,           data graphemes non-NA color responses           used; FALSE, even data graphemes NA color           responses used. Defaults TRUE. symbol_filter character vector (NULL) specifies           graphemes' data use. Defaults NULL, meaning data           participants' graphemes used.","code":""},{"path":"https://datalowe.github.io/synr/reference/ParticipantGroup-class.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"A Reference Class for representing a group of consistency test participants — ParticipantGroup-class","text":"data frame columns valid Holds TRUE participants whose data         classified valid, FALSE participants whose data         classified invalid. reason_invalid Strings describe           participant data deemed invalid. Participants           whose data classified valid empty strings . twcv Numeric column holds participants'           calculated TWCV scores (NA participants /          graphemes complete responses). num_clusters One-element numeric (NA /          graphemes complete responses) vector indicating           number identified clusters counting toward           tally compared 'safe_num_clusters'.","code":""},{"path":"https://datalowe.github.io/synr/reference/centroid_3d_sq_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sum of squared 3D point distances from centroid — centroid_3d_sq_dist","title":"Calculate sum of squared 3D point distances from centroid — centroid_3d_sq_dist","text":"Calculates sum squared point distances 3D space betweeen points centroid. $$ \\frac{ \\sum_{=1}^n (x_i-x_m)^2 + (y_i-y_m)^2 + (z-z_m)^2 }{ sum_(=1)^n ((x - x_m)^2 + (y - y_m)^2 + (z - z_m)^2) } $$ \\(X/Y/Z\\) represent one axis , \\(a_m\\) represents mean points' coordinates axis, \\(n\\) represents total number points.","code":""},{"path":"https://datalowe.github.io/synr/reference/centroid_3d_sq_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sum of squared 3D point distances from centroid — centroid_3d_sq_dist","text":"","code":"centroid_3d_sq_dist(point_matrix)"},{"path":"https://datalowe.github.io/synr/reference/centroid_3d_sq_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sum of squared 3D point distances from centroid — centroid_3d_sq_dist","text":"point_matrix n--3 numerical matrix row corresponds single point 3D space.","code":""},{"path":"https://datalowe.github.io/synr/reference/create_grapheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a grapheme instance — create_grapheme","title":"Create a grapheme instance — create_grapheme","text":"Takes symbol/grapheme sets response times/colors, creates Grapheme instance holds passed information returns .","code":""},{"path":"https://datalowe.github.io/synr/reference/create_grapheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a grapheme instance — create_grapheme","text":"","code":"create_grapheme(   symbol,   response_times = NULL,   response_colors,   color_space_spec = \"Luv\" )"},{"path":"https://datalowe.github.io/synr/reference/create_grapheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a grapheme instance — create_grapheme","text":"symbol one-element character vector holding symbol/grapheme. response_times (optional) numeric vector. Times presentation response, order. response_colors character vector. Response colors, hex color codes. color_space_spec one-element character vector. color space used? following color spaces supported: \"XYZ\", \"sRGB\", \"Apple RGB\", \"Lab\", \"Luv\"","code":""},{"path":"https://datalowe.github.io/synr/reference/create_grapheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a grapheme instance — create_grapheme","text":"","code":"create_grapheme(symbol=\"a\", response_times=c(2.3, 6.7, 0.4), response_colors=c(\"84AE99\", \"9E3300\", \"000000\"), color_space_spec=\"Luv\") #> Reference class object of class \"Grapheme\" #> Field \"symbol\": #> [1] \"a\" #> Field \"response_colors\": #>          [,1]      [,2]     [,3] #> [1,] 67.60265 -21.34313 11.89985 #> [2,] 37.31578  86.01643 30.79221 #> [3,]  0.00000   0.00000  0.00000 #> Field \"response_times\": #> [1] 2.3 6.7 0.4 #> Field \"color_space\": #> [1] \"Luv\""},{"path":"https://datalowe.github.io/synr/reference/create_participant.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Participant instance. — create_participant","title":"Create a Participant instance. — create_participant","text":"Takes participant id, set symbols graphemes created participant trial/response data. Returns Participant instance input data linked . grapheme, data less trials number specified n_trials_per_grapheme, NA values added affected graphemes' associated vectors response times/colors.","code":""},{"path":"https://datalowe.github.io/synr/reference/create_participant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Participant instance. — create_participant","text":"","code":"create_participant(   participant_id,   grapheme_symbols,   n_trials_per_grapheme,   trial_symbols,   response_times = NULL,   response_colors,   color_space_spec = \"Luv\",   test_date = NULL )"},{"path":"https://datalowe.github.io/synr/reference/create_participant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Participant instance. — create_participant","text":"participant_id one-element character vector holding participant id. grapheme_symbols character vector symbols/graphemes Grapheme instances created linked Participant instance. n_trials_per_grapheme one-element numeric vector holding number trials per grapheme. trial_symbols character vector holds one symbol/grapheme trial participant's consistency test run. response_times (optional) numeric vector. Consistency test times presentation response, order. response_colors character vector. Consistency test response colors, hex color codes. color_space_spec one-element character vector. color space used? following color spaces supported: \"XYZ\", \"sRGB\", \"Apple RGB\", \"Lab\", \"Luv\" test_date (optional) one-element character vector format \"YYYY-MM-DD\" indicates date participant finished consistency test.","code":""},{"path":"https://datalowe.github.io/synr/reference/create_participant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Participant instance. — create_participant","text":"","code":"participant_id <- \"1\" target_symbols_vec <- c(\"A\", \"D\", \"7\") symbol_vec <- c(\"A\", \"D\", \"7\",                 \"D\", \"A\", \"7\",                 \"7\", \"A\", \"D\") times_vec <- c(1.1, 0.4, 5,                0.3, 2.4, 7.3,                1, 10.2, 8.4) color_vec <- c(\"98FF22\", \"138831\", \"791322\",                \"8952FE\", \"DC8481\", \"7D89B0\",                \"001100\", \"887755\", \"FF0033\") p <- create_participant(participant_id=participant_id,                         grapheme_symbols=target_symbols_vec,                         n_trials_per_grapheme=3,                         trial_symbols=symbol_vec,                         response_times=times_vec,                         response_colors=color_vec,                         color_space_spec=\"Luv\")"},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ParticipantGroup instance using long-format data — create_participantgroup","title":"Create a ParticipantGroup instance using long-format data — create_participantgroup","text":"Takes data frame raw 'long format' consistency test data returns ParticipantGroup instance, relevant data linked. See example data frame `synr_exampledf_long_small` documentation (`help(synr_exampledf_long_small)`) information format function expects data .","code":""},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ParticipantGroup instance using long-format data — create_participantgroup","text":"","code":"create_participantgroup(   raw_df,   n_trials_per_grapheme = 3,   id_col_name,   symbol_col_name,   color_col_name,   time_col_name = NULL,   color_space_spec = \"Luv\" )"},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ParticipantGroup instance using long-format data — create_participantgroup","text":"raw_df data frame 'long format' raw consistency test data. n_trials_per_grapheme one-element numeric vector holding number trials per grapheme used consistency test data . id_col_name one-element character vector holds name participant id column raw_df. symbol_col_name one-element character vector holds name grapheme/symbol column raw_df. color_col_name one-element character vector holds name response color (hex codes) column raw_df. time_col_name (optional) one-element character vector holds name response time (time stimulus presentation response) column raw_df. color_space_spec one-element character vector specifying color space use calculations participant data. One \"XYZ\", \"sRGB\", \"Apple RGB\", \"Lab\", \"Luv\".","code":""},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ParticipantGroup instance using long-format data — create_participantgroup","text":"","code":"pg <- create_participantgroup(   raw_df=synr_exampledf_long_small,   n_trials_per_grapheme=2,   id_col_name=\"participant_id\",   symbol_col_name=\"trial_symbol\",   color_col_name=\"response_color\",   time_col_name=\"response_time\",   color_space_spec=\"Luv\" ) cons_means <- pg$get_mean_consistency_scores() print(cons_means) #> [1] 131.2060 101.3738 151.9597"},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup_widedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ParticipantGroup instance — create_participantgroup_widedata","title":"Create a ParticipantGroup instance — create_participantgroup_widedata","text":"Takes data frame raw consistency test data returns ParticipantGroup instance, relevant data linked. See example data frame synr_exampledf_wide_small documentation (help(synr_exampledf_wide_small)) information format function expects data . Participant id (optional) test date column names specified exact column names used data frame passed function. Symbol (. e. grapheme), response color response time (optional) columns specified using regular expressions. can read regular expressions using R want , basically want : say columns response colors named \"chosen_color_001\", \"chosen_color_002\" . simply set color_col_regex=\"chosen_color\" calling function. important thing specify part column names unique type column want indicate. symbol/grapheme columns named \"grapheme_1\", \"grapheme_2\" ... participant id column named \"graphparticipant_1\" ..., symbol_col_regex=\"graph\" work, symbol_col_regex=\"grapheme_\" even symbol_col_regex=\"graphe\" .","code":""},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup_widedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ParticipantGroup instance — create_participantgroup_widedata","text":"","code":"create_participantgroup_widedata(   raw_df,   n_trials_per_grapheme = 3,   participant_col_name,   symbol_col_regex,   color_col_regex = \"colou*r\",   time_col_regex = NULL,   testdate_col_name = NULL,   color_space_spec = \"Luv\" )"},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup_widedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ParticipantGroup instance — create_participantgroup_widedata","text":"raw_df data frame raw consistency test data. n_trials_per_grapheme one-element numeric vector holding number trials per grapheme used consistency test data . participant_col_name one-element character vector holds column name used column raw_df holds participant id's. (e. g. \"participant_id\" synr::synr_exampledf_wide_small) symbol_col_regex one-element character vector regular expression (see ) unique columns passed data frame hold trial graphemes/symbols. color_col_regex one-element character vector regular expression (see ) unique columns passed data frame hold response color hex codes. time_col_regex (optional) one-element character vector regular expression (see ) unique columns passed data frame hold response times (times stimulus presentation response). testdate_col_name (optional) one-element character vector holds column name used column raw_df holds test dates (dates participants finished consistency test). color_space_spec one-element character vector. color space used analyses data? following color spaces supported: \"XYZ\", \"sRGB\", \"Apple RGB\", \"Lab\", \"Luv\"","code":""},{"path":"https://datalowe.github.io/synr/reference/create_participantgroup_widedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ParticipantGroup instance — create_participantgroup_widedata","text":"","code":"pg <- create_participantgroup_widedata(raw_df=synr_exampledf_wide_small,                               n_trials_per_grapheme=2,                               participant_col_name=\"participant_id\",                               symbol_col_regex=\"symbol\",                               color_col_regex=\"colou*r\",                               time_col_regex=\"response_time\",                               color_space_spec=\"Luv\" ) cons_means <- pg$get_mean_consistency_scores() print(cons_means) #> [1] 105.9028 135.8346 124.1099"},{"path":"https://datalowe.github.io/synr/reference/filter_graphemes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter graphemes of a single participant — filter_graphemes","title":"Filter graphemes of a single participant — filter_graphemes","text":"Takes list Grapheme objects character vector. Returns list Grapheme objects, consisting participant's graphemes symbol included character vector filter .","code":""},{"path":"https://datalowe.github.io/synr/reference/filter_graphemes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter graphemes of a single participant — filter_graphemes","text":"","code":"filter_graphemes(graphemes, symbol_vector = NULL)"},{"path":"https://datalowe.github.io/synr/reference/filter_graphemes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter graphemes of a single participant — filter_graphemes","text":"graphemes list Grapheme objects. symbol_vector character vector symbols filter participant's graphemes . Alternatively NULL (default), case filtering done full grapheme list returned.","code":""},{"path":"https://datalowe.github.io/synr/reference/filter_graphemes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter graphemes of a single participant — filter_graphemes","text":"list Grapheme objects.","code":""},{"path":"https://datalowe.github.io/synr/reference/point_3d_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sample variance of 3D point distance from centroid — point_3d_variance","title":"Calculate sample variance of 3D point distance from centroid — point_3d_variance","text":"Calculates sample variance points' distances 3D space centroid. function normally used indirectly `validate_get_twcv`.","code":""},{"path":"https://datalowe.github.io/synr/reference/point_3d_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sample variance of 3D point distance from centroid — point_3d_variance","text":"","code":"point_3d_variance(point_matrix)"},{"path":"https://datalowe.github.io/synr/reference/point_3d_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sample variance of 3D point distance from centroid — point_3d_variance","text":"point_matrix n--3 numerical matrix row corresponds single point 3D space.","code":""},{"path":"https://datalowe.github.io/synr/reference/point_3d_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sample variance of 3D point distance from centroid — point_3d_variance","text":"one-element numeric vector holding calculated variance","code":""},{"path":"https://datalowe.github.io/synr/reference/point_3d_variance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate sample variance of 3D point distance from centroid — point_3d_variance","text":"variance taken mean sum variances dimension/axis: $$ \\frac{\\sum_{=1}^n (x_i-x_m)^2 + (y_i-y_m)^2 + (z-z_m)^2}{n-1} $$ \\(X/Y/Z\\) represent one axis , \\(a_m\\) represents mean points' coordinates axis, \\(n\\) represents total number points.","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/reference/synr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"synr: Explore and Process Synesthesia Consistency Test Data — synr-package","title":"synr: Explore and Process Synesthesia Consistency Test Data — synr-package","text":"synr helps work data resulting grapheme-color consistency tests synesthesia. learn synr, start vignettes: browseVignettes(package = \"synr\")","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/reference/synr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"synr: Explore and Process Synesthesia Consistency Test Data — synr-package","text":"Maintainer: Lowe Wilsson datalowe@posteo.de","code":""},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_large.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw consistency test data example, long format — synr_exampledf_large","title":"Raw consistency test data example, long format — synr_exampledf_large","text":"data frame example raw consistency test data compatible synr package's `create_participantgroup' function. color 'symbol' data five actual participants test included letters, digits weekdays, 3 trials per grapheme. response times randomly generated. Note response times optional. , can still use synr - see `help(create_participantgroup_widedata)`.","code":""},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_large.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw consistency test data example, long format — synr_exampledf_large","text":"","code":"synr_exampledf_large"},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_large.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw consistency test data example, long format — synr_exampledf_large","text":"data frame 516 rows 4 columns: participant_id Participant ID trial_symbol Column trial symbols/graphemes response_color Column trial response colors response_time Column trial response times","code":""},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_long_small.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw consistency test data example, long format (small) — synr_exampledf_long_small","title":"Raw consistency test data example, long format (small) — synr_exampledf_long_small","text":"data frame example raw consistency test data compatible synr package's `create_participantgroup` function, completely made updata three participants hypothetical test included three graphemes (\"\", \"D\", 7) two responses per grapheme. graphemes /responses per grapheme can handled package (though participant plots function correctly three responses per grapheme). Note response times optional. , can still use synr - see `help(create_participantgroup_widedata)`.","code":""},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_long_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw consistency test data example, long format (small) — synr_exampledf_long_small","text":"","code":"synr_exampledf_long_small"},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_long_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw consistency test data example, long format (small) — synr_exampledf_long_small","text":"data frame 18 rows 4 columns: participant_id Participant ID trial_symbol Column trial symbols/graphemes response_color Column trial response colors response_time Column trial response times","code":""},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_wide_small.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw consistency test data example, wide format (small) — synr_exampledf_wide_small","title":"Raw consistency test data example, wide format (small) — synr_exampledf_wide_small","text":"data frame example raw consistency test data compatible synr package's `create_participantgroup_widedata` function, data three participants test included three graphemes (\"\", \"D\", 7) two responses per grapheme. graphemes /responses per grapheme can handled package (though participant plots function correctly three responses per grapheme)","code":""},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_wide_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw consistency test data example, wide format (small) — synr_exampledf_wide_small","text":"","code":"synr_exampledf_wide_small"},{"path":"https://datalowe.github.io/synr/reference/synr_exampledf_wide_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw consistency test data example, wide format (small) — synr_exampledf_wide_small","text":"data frame 3 rows 8 columns: participant_id Participant ID symbol_1 Column symbol/grapheme connected first response response_color_1 Column color first response response_time_1 (optional) Column time   presentation response, first response symbol_2 Column symbol/grapheme connected second response response_color_2 Column color second response response_time_2 (optional) Column time   presentation response, second response symbol_3 Column symbol/grapheme connected third response response_color_3 Column color third response response_time_3 (optional) Column time   presentation response, third response symbol_4 Column symbol/grapheme connected fourth response response_color_4 Column color fourth response response_time_4 (optional) Column time   presentation response, fourth response symbol_5 Column symbol/grapheme connected fifth response response_color_5 Column color fifth response response_time_5 (optional) Column time   presentation response, fifth response symbol_6 Column symbol/grapheme connected sixth response response_color_6 Column color sixth response response_time_6 (optional) Column time   presentation response, sixth response","code":""},{"path":"https://datalowe.github.io/synr/reference/total_within_cluster_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Total Within Cluster Variance of 3D points — total_within_cluster_variance","title":"Calculate Total Within Cluster Variance of 3D points — total_within_cluster_variance","text":"Calculates Total Within Cluster Variance(TWCV) 3D points. function normally used indirectly `validate_get_twcv`.","code":""},{"path":"https://datalowe.github.io/synr/reference/total_within_cluster_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Total Within Cluster Variance of 3D points — total_within_cluster_variance","text":"","code":"total_within_cluster_variance(point_matrix, cluster_vector)"},{"path":"https://datalowe.github.io/synr/reference/total_within_cluster_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Total Within Cluster Variance of 3D points — total_within_cluster_variance","text":"point_matrix n--3 numerical matrix row corresponds single point 3D space. cluster_vector numerical vector cluster assignments, length n (ie one assignment per point).","code":""},{"path":"https://datalowe.github.io/synr/reference/total_within_cluster_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Total Within Cluster Variance of 3D points — total_within_cluster_variance","text":"one-element numeric vector holding calculated variance","code":""},{"path":"https://datalowe.github.io/synr/reference/total_within_cluster_variance.html","id":"twcv","dir":"Reference","previous_headings":"","what":"TWCV","title":"Calculate Total Within Cluster Variance of 3D points — total_within_cluster_variance","text":"TWCV synr-specific term measure aims describe spread points 3D space taking account points belong distinct clusters. TWCV calculated multi-step process: cluster's centroid calculated. points' squared distances corresponding centroids calculated. point--centroid squared distances summed . sum squared distances divided total number points, minus number clusters (account decreased degrees freedom).","code":""},{"path":[]},{"path":"https://datalowe.github.io/synr/reference/validate_get_twcv.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if color data are valid and get TWCV — validate_get_twcv","title":"Check if color data are valid and get TWCV — validate_get_twcv","text":"Checks passed color data valid, . e. bountiful varied enough according passed validation criteria. function normally used indirectly `Participant$check_valid_get_twcv()` `ParticipantGroup$get_valid_twcv()`.","code":""},{"path":"https://datalowe.github.io/synr/reference/validate_get_twcv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if color data are valid and get TWCV — validate_get_twcv","text":"","code":"validate_get_twcv(   color_matrix,   dbscan_eps = 20,   dbscan_min_pts = 4,   max_var_tight_cluster = 150,   max_prop_single_tight_cluster = 0.6,   safe_num_clusters = 3,   safe_twcv = 250 )"},{"path":"https://datalowe.github.io/synr/reference/validate_get_twcv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if color data are valid and get TWCV — validate_get_twcv","text":"color_matrix n--3 numerical matrix row corresponds single point 3D color space. dbscan_eps One-element numerical vector: radius ‘epsilon neighborhood’ applying DBSCAN clustering. dbscan_min_pts One-element numerical vector: Minimum number points required epsilon neighborhood core points (including core point ). max_var_tight_cluster One-element numerical vector: maximum variance cluster considered 'tight-knit'. max_prop_single_tight_cluster One-element numerical vector: maximum proportion points allowed within 'tight-knit' cluster (threshold exceeded, data categorized invalid). safe_num_clusters One-element numerical vector: minimum number clusters guarantees validity points 'non-tight-knit'. safe_twcv One-element numerical vector: minimum total within-cluster variance (TWCV) score guarantees validity points 'non-tight-knit'.","code":""},{"path":"https://datalowe.github.io/synr/reference/validate_get_twcv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if color data are valid and get TWCV — validate_get_twcv","text":"list components valid One-element logical vector reason_invalid One-element character vector, empty valid TRUE twcv One-element numeric (NA calculated) vector, indicating TWCV num_clusters One-element numeric (NA calculated) vector, indicating number identified clusters counting toward tally compared 'safe_num_clusters'","code":""},{"path":"https://datalowe.github.io/synr/reference/validate_get_twcv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if color data are valid and get TWCV — validate_get_twcv","text":"function relies heavily DBSCAN algorithm implementation R package `dbscan`, clustering color points. information regarding 'dbscan_eps' 'dbscan_min_pts' parameters well DBSCAN , please see `dbscan` documentation. clustering done, passed validation criteria applied: high proportion color points (cut-specified `max_prop_single_tight_cluster`) fall within single 'tight-knit' cluster (cluster variance less equal `max_var_tight_cluster`), data always classified invalid. first criterion cleared, points form `safe_num_cluster` clusters, data always classified valid. first criterion cleared, Total Within-Cluster Variance (TWCV) score greater equal `safe_twcv`, data always classified valid. Note means data can classified valid either least 'safe_num_cluster' clusters, points composing smaller number clusters spaced relatively far apart within clusters. DBSCAN 'noise' cluster counts towards 'cluster tally' (compared 'safe_num_cluster') includes least 'dbscan_min_pts' points. Points noise cluster however always included calculations, e. g. total within-cluster variance (TWCV).","code":""},{"path":[]}]
